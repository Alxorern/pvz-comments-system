/**
 * API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º
 */
class ApiClient {
  constructor() {
    this.baseUrl = '';
    this.initializeTokenFromUrl();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
   */
  initializeTokenFromUrl() {
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token');
    
    if (token && !this.getAuthToken()) {
      console.log('üîë –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ URL –≤ localStorage');
      localStorage.setItem('authToken', token);
      
      // –û—á–∏—â–∞–µ–º URL –æ—Ç —Ç–æ–∫–µ–Ω–∞
      const newUrl = window.location.pathname;
      window.history.replaceState({}, document.title, newUrl);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ localStorage
   */
  getAuthToken() {
    const token = localStorage.getItem('authToken');
    console.log('üîë getAuthToken - —Ç–æ–∫–µ–Ω –∏–∑ localStorage:', token ? token.substring(0, 20) + '...' : 'null');
    return token;
  }

  /**
   * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  getAuthHeaders() {
    const token = this.getAuthToken();
    console.log('üîë getAuthHeaders - —Ç–æ–∫–µ–Ω:', token ? token.substring(0, 20) + '...' : 'null');
    return {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –ª–æ–≥–∏–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  checkAuthAndRedirect() {
    const token = this.getAuthToken();
    const currentPath = window.location.pathname;
    
    if (!token) {
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞
      if (currentPath !== '/' && currentPath !== '/index.html') {
        const returnUrl = encodeURIComponent(currentPath);
        window.location.href = `/?return=${returnUrl}`;
      }
      return false;
    }
    
    return true;
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  async handleAuthError(response) {
    const currentPath = window.location.pathname;
    
    if (response.status === 401 || response.status === 403) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
      try {
        const errorData = await response.json();
        console.log('üîç –û—à–∏–±–∫–∞ API:', errorData);
        
        // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ JWT –æ—à–∏–±–∫–∞
        if (errorData.error && (
          errorData.error.includes('jwt') || 
          errorData.error.includes('token') ||
          errorData.error.includes('expired') ||
          errorData.error.includes('malformed')
        )) {
          console.log('üîë –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑-–∑–∞ JWT –æ—à–∏–±–∫–∏:', errorData.error);
          localStorage.removeItem('authToken');
          localStorage.removeItem('user');
          
          // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞
          if (currentPath !== '/' && currentPath !== '/index.html') {
            const returnUrl = encodeURIComponent(currentPath);
            window.location.href = `/?return=${returnUrl}`;
          }
          return true;
        } else {
          console.log('‚ö†Ô∏è 403 –æ—à–∏–±–∫–∞, –Ω–æ –Ω–µ JWT - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω');
          return false;
        }
      } catch (e) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—à–∏–±–∫—É, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω');
        return false;
      }
    }
    return false;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç GET –∑–∞–ø—Ä–æ—Å
   */
  async get(endpoint) {
    try {
      const response = await fetch(`${this.baseUrl}${endpoint}`, {
        method: 'GET',
        headers: this.getAuthHeaders()
      });


      if (await this.handleAuthError(response)) {
        return null;
      }

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('üìä API GET –¥–∞–Ω–Ω—ã–µ:', data);
      return data;
    } catch (error) {
      console.error('API GET error:', error);
      return null;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç POST –∑–∞–ø—Ä–æ—Å
   */
  async post(endpoint, data) {
    try {
      console.log('üîÑ API POST –∑–∞–ø—Ä–æ—Å:', {
        endpoint: endpoint,
        data: data,
        dataStringified: JSON.stringify(data)
      });

      const response = await fetch(`${this.baseUrl}${endpoint}`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
        body: JSON.stringify(data)
      });

      console.log('üì° API POST –æ—Ç–≤–µ—Ç:', {
        status: response.status,
        ok: response.ok,
        statusText: response.statusText
      });

      if (await this.handleAuthError(response)) {
        return null;
      }

      if (!response.ok) {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        let errorText = '';
        try {
          errorText = await response.text();
          console.error('‚ùå –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
        } catch (e) {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏');
        }
        throw new Error(`HTTP error! status: ${response.status}, text: ${errorText}`);
      }

      return response.json(); // Return parsed JSON data
    } catch (error) {
      console.error('API POST error:', error);
      return null;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç PUT –∑–∞–ø—Ä–æ—Å
   */
  async put(endpoint, data) {
    try {
      const response = await fetch(`${this.baseUrl}${endpoint}`, {
        method: 'PUT',
        headers: this.getAuthHeaders(),
        body: JSON.stringify(data)
      });

      if (await this.handleAuthError(response)) {
        return null;
      }

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return response.json(); // Return parsed JSON data
    } catch (error) {
      console.error('API PUT error:', error);
      return null;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç DELETE –∑–∞–ø—Ä–æ—Å
   */
  async delete(endpoint) {
    try {
      const response = await fetch(`${this.baseUrl}${endpoint}`, {
        method: 'DELETE',
        headers: this.getAuthHeaders()
      });

      if (await this.handleAuthError(response)) {
        return null;
      }

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return response;
    } catch (error) {
      console.error('API DELETE error:', error);
      return null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
window.apiClient = new ApiClient();
