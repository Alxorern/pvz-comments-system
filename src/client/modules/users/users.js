/**
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
class UsersModule {
  constructor() {
    this.editingUserId = null;
    this.cache = {
      users: [],
      roles: [],
      companies: [],
      lastCreatedUserId: null
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
   */
  async init() {
    this.setupEventListeners();
    await this.loadData();
    this.renderUsers();
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —Å–∫—Ä—ã—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.hideAllModals();
  }
  
  hideAllModals() {
    const modals = ['overlayAddUser', 'overlayEditUser'];
    modals.forEach(id => {
      const modal = document.getElementById(id);
      if (modal) {
        modal.classList.remove('show');
      }
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    const btnAddUser = document.getElementById('btnAddUser');
    if (btnAddUser) {
      btnAddUser.addEventListener('click', () => this.showAddUserModal());
    }

    const btnCancelAddUser = document.getElementById('btnCancelAddUser');
    if (btnCancelAddUser) {
      btnCancelAddUser.addEventListener('click', () => this.hideAddUserModal());
    }

    const closeAddUserModal = document.getElementById('closeAddUserModal');
    if (closeAddUserModal) {
      closeAddUserModal.addEventListener('click', () => this.hideAddUserModal());
    }

    const btnSubmitAddUser = document.getElementById('btnSubmitAddUser');
    if (btnSubmitAddUser) {
      btnSubmitAddUser.addEventListener('click', () => this.submitAddUser());
    }

    const btnCancelEditUser = document.getElementById('btnCancelEditUser');
    if (btnCancelEditUser) {
      btnCancelEditUser.addEventListener('click', () => this.hideEditUserModal());
    }

    const btnSubmitEditUser = document.getElementById('btnSubmitEditUser');
    if (btnSubmitEditUser) {
      btnSubmitEditUser.addEventListener('click', () => this.submitEditUser());
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
    const overlayAddUser = document.getElementById('overlayAddUser');
    if (overlayAddUser) {
      overlayAddUser.addEventListener('click', (e) => {
        if (e.target === overlayAddUser) {
          this.hideAddUserModal();
        }
      });
    }

    const overlayEditUser = document.getElementById('overlayEditUser');
    if (overlayEditUser) {
      overlayEditUser.addEventListener('click', (e) => {
        if (e.target === overlayEditUser) {
          this.hideEditUserModal();
        }
      });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π)
    const usersTableBody = document.getElementById('usersTableBody');
    if (usersTableBody) {
      usersTableBody.addEventListener('click', (e) => {
        if (e.target.classList.contains('edit-user-btn')) {
          const userId = e.target.getAttribute('data-user-id');
          if (userId) {
            this.showEditUserModal(userId);
          }
        }
      });
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
   */
  async loadData() {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      console.log('üîç secureApiClient –¥–æ—Å—Ç—É–ø–µ–Ω:', !!window.secureApiClient);
      console.log('üîç utils –¥–æ—Å—Ç—É–ø–µ–Ω:', !!window.utils);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      const usersResponse = await window.secureApiClient.get('/api/users');
      console.log('üì• –û—Ç–≤–µ—Ç API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersResponse);
      
      if (usersResponse && usersResponse.success) {
        this.cache.users = usersResponse.data || [];
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersResponse.data ? usersResponse.data.length : 0);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersResponse);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏
      console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏...');
      const rolesResponse = await window.secureApiClient.get('/api/roles');
      console.log('üì• –û—Ç–≤–µ—Ç API —Ä–æ–ª–µ–π:', rolesResponse);
      
      if (rolesResponse && rolesResponse.success) {
        this.cache.roles = rolesResponse.data || [];
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–æ–ª–µ–π:', rolesResponse.data ? rolesResponse.data.length : 0);
        this.populateRoles();
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª–µ–π:', rolesResponse);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
      console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏...');
      const companiesResponse = await window.secureApiClient.get('/api/companies/all');
      console.log('üì• –û—Ç–≤–µ—Ç API –∫–æ–º–ø–∞–Ω–∏–π:', companiesResponse);
      
      if (companiesResponse && companiesResponse.success) {
        this.cache.companies = companiesResponse.data || [];
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π:', companiesResponse.data ? companiesResponse.data.length : 0);
        this.populateCompanies();
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π:', companiesResponse);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      if (window.utils) {
        window.utils.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
      }
    }
  }

  /**
   * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ —Ä–æ–ª–µ–π
   */
  populateRoles() {
    const addSelect = document.getElementById('addUserRole');
    if (addSelect) {
      addSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å</option>';
      this.cache.roles.forEach(role => {
        const option = document.createElement('option');
        option.value = role.name;
        option.textContent = role.name;
        addSelect.appendChild(option);
      });
    }
    
    const editSelect = document.getElementById('editUserRole');
    if (editSelect) {
      editSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å</option>';
      this.cache.roles.forEach(role => {
        const option = document.createElement('option');
        option.value = role.name;
        option.textContent = role.name;
        editSelect.appendChild(option);
      });
    }
  }

  /**
   * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π
   */
  populateCompanies() {
    const addSelect = document.getElementById('addUserCompany');
    if (addSelect) {
      addSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é</option>';
      this.cache.companies.forEach(company => {
        console.log('üè¢ –ö–æ–º–ø–∞–Ω–∏—è:', company); // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        const option = document.createElement('option');
        option.value = company.company_id;
        option.textContent = company.company_name;
        addSelect.appendChild(option);
      });
    }
    
    const editSelect = document.getElementById('editUserCompany');
    if (editSelect) {
      editSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é</option>';
      this.cache.companies.forEach(company => {
        const option = document.createElement('option');
        option.value = company.company_id;
        option.textContent = company.company_name;
        editSelect.appendChild(option);
      });
    }
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  renderUsers() {
    const tbody = document.getElementById('usersTableBody');
    if (!tbody) return;
    
    tbody.innerHTML = '';

    this.cache.users.forEach(user => {
      const row = document.createElement('tr');
      row.dataset.id = user.id;
      row.dataset.created = user.created;
      
      row.innerHTML = `
        <td>${user.user_id}</td>
        <td>${user.login}</td>
        <td>${user.full_name}</td>
        <td>${user.role_name || user.role}</td>
        <td>${user.company_name || '-'}</td>
        <td>${user.created ? (window.utils ? window.utils.formatDate(user.created) : user.created) : ''}</td>
        <td>${user.addwho || ''}</td>
        <td>
          <button class="btn small edit-user-btn" data-user-id="${user.user_id}">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
        </td>
      `;

      // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
      if (this.cache.lastCreatedUserId && user.user_id === this.cache.lastCreatedUserId) {
        row.classList.add('highlight');
      }

      tbody.appendChild(row);
    });

    // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    if (this.cache.lastCreatedUserId) {
      setTimeout(() => {
        this.cache.lastCreatedUserId = null;
        const highlightedRows = tbody.querySelectorAll('.highlight');
        highlightedRows.forEach(row => row.classList.remove('highlight'));
      }, 5000);
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  showAddUserModal() {
    const modal = document.getElementById('overlayAddUser');
    if (modal) {
      modal.classList.add('show');
      this.clearAddUserForm();
    }
  }

  /**
   * –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  hideAddUserModal() {
    const modal = document.getElementById('overlayAddUser');
    if (modal) {
      modal.classList.remove('show');
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  showEditUserModal(userId) {
    const overlay = document.getElementById('overlayEditUser');
    if (overlay) {
      overlay.classList.add('show');
      
      console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', userId);
      
      const user = this.cache.users.find(u => u.user_id == userId);
      if (user) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', user);
        document.getElementById('editUserFullName').value = user.full_name || '';
        document.getElementById('editUserLogin').value = user.login || '';
        document.getElementById('editUserPassword').value = '';
        document.getElementById('editUserRole').value = user.role || '';
        document.getElementById('editUserCompany').value = user.company_id || '';
        
        this.editingUserId = userId;
      } else {
        console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ:', userId);
        if (window.utils) {
          window.utils.showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        }
      }
    }
  }

  /**
   * –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  hideEditUserModal() {
    const overlay = document.getElementById('overlayEditUser');
    if (overlay) {
      overlay.classList.remove('show');
    }
    this.editingUserId = null;
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  clearAddUserForm() {
    const fields = ['addUserFullName', 'addUserLogin', 'addUserPassword', 'addUserRole'];
    fields.forEach(fieldId => {
      const field = document.getElementById(fieldId);
      if (field) {
        field.value = '';
      }
    });
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async submitAddUser() {
    const fullNameEl = document.getElementById('addUserFullName');
    const loginEl = document.getElementById('addUserLogin');
    const passwordEl = document.getElementById('addUserPassword');
    const roleEl = document.getElementById('addUserRole');
    const companyEl = document.getElementById('addUserCompany');
    
    if (!fullNameEl || !loginEl || !passwordEl || !roleEl || !companyEl) {
      if (window.utils) {
        window.utils.showNotification('–ù–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω—ã', 'error');
      }
      return;
    }
    
    const fullName = fullNameEl.value.trim();
    const login = loginEl.value.trim();
    const password = passwordEl.value.trim();
    const role = roleEl.value;
    const company_id = companyEl.value;

    if (!fullName || !login || !password || !role) {
      if (window.utils) {
        window.utils.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
      }
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    if (password.length < 6) {
      if (window.utils) {
        window.utils.showNotification('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
      }
      return;
    }

    const userData = {
      full_name: fullName,
      login: login,
      password: password,
      role: role,
      company_id: company_id && company_id.trim() !== '' ? company_id : null
    };

    try {
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { 
        userData: { ...userData, password: '[HIDDEN]' } 
      });
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', userData);
      
      const result = await window.secureApiClient.post('/api/users', userData);
      
      if (result && result.success) {
        this.hideAddUserModal();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        await this.refreshUsers();
        
        if (window.utils) {
          window.utils.showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
        }
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        let errorMessage = '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
        if (result && result.details && Array.isArray(result.details)) {
          errorMessage = result.details.join(', ');
        } else if (result && result.error) {
          errorMessage = result.error;
        }
        
        if (window.utils) {
          window.utils.showNotification(errorMessage, 'error');
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
      let errorMessage = '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
      if (error.message && error.message.includes('HTTP error! status: 400')) {
        errorMessage = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π';
      } else {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message;
      }
      
      if (window.utils) {
        window.utils.showNotification(errorMessage, 'error');
      }
    }
  }

  /**
   * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async submitEditUser() {
    const fullNameEl = document.getElementById('editUserFullName');
    const loginEl = document.getElementById('editUserLogin');
    const passwordEl = document.getElementById('editUserPassword');
    const roleEl = document.getElementById('editUserRole');
    const companyEl = document.getElementById('editUserCompany');
    
    if (!fullNameEl || !loginEl || !passwordEl || !roleEl || !companyEl) {
      if (window.utils) {
        window.utils.showNotification('–ù–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω—ã', 'error');
      }
      return;
    }
    
    const fullName = fullNameEl.value.trim();
    const login = loginEl.value.trim();
    const password = passwordEl.value.trim();
    const role = roleEl.value;
    const company_id = companyEl.value;

    if (!fullName || !login || !role) {
      if (window.utils) {
        window.utils.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –§–ò–û, –ª–æ–≥–∏–Ω –∏ —Ä–æ–ª—å', 'error');
      }
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π)
    if (password && password.length < 6) {
      if (window.utils) {
        window.utils.showNotification('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
      }
      return;
    }

    const userData = {
      full_name: fullName,
      login: login,
      role: role,
      company_id: company_id && company_id.trim() !== '' ? company_id : null
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
    if (password && password.trim() !== '') {
      userData.password = password;
    }

    try {
      console.log('üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { 
        editingUserId: this.editingUserId, 
        userData: { ...userData, password: userData.password ? '[HIDDEN]' : '[EMPTY]' } 
      });
      
      const result = await window.secureApiClient.put(`/api/users/${this.editingUserId}`, userData);
      
      if (result && result.success) {
        this.hideEditUserModal();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        await this.refreshUsers();
        
        if (window.utils) {
          window.utils.showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
        }
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        let errorMessage = '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
        if (result && result.details && Array.isArray(result.details)) {
          errorMessage = result.details.join(', ');
        } else if (result && result.error) {
          errorMessage = result.error;
        }
        
        if (window.utils) {
          window.utils.showNotification(errorMessage, 'error');
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
      let errorMessage = '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
      if (error.message && error.message.includes('HTTP error! status: 400')) {
        errorMessage = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π';
      } else {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message;
      }
      
      if (window.utils) {
        window.utils.showNotification(errorMessage, 'error');
      }
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async refreshUsers() {
    await this.loadData();
    this.renderUsers();
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
window.usersModule = new UsersModule();
