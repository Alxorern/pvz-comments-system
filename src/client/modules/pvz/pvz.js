/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –ü–í–ó
 */
class PvzModule {
  constructor() {
    this.currentPage = 1;
    this.pageSize = 20;
    this.totalPages = 1;
    this.totalItems = 0;
    this.currentSort = { column: 'updated_at', direction: 'desc' }; // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.currentFilters = {
      pvzId: '',
      regions: [],
      address: '',
      company: ''
    };
    this.tableSettings = {
      columnVisibility: {},
      columnWidths: {},
      columnOrder: []
    };
    this.regions = [];
    this.data = [];
    this.allData = []; // –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    this.filteredData = null; // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    this.selectedSuggestionIndex = -1;
    this.currentSuggestions = [];
    this.filterTimeout = null;
    this.currentPvzId = null;
    this.isSortingInProgress = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    
    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    this.cache = {
      data: new Map(), // –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–ª—é—á—É –∑–∞–ø—Ä–æ—Å–∞
      lastUpdate: null, // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      cacheTimeout: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
      maxCacheSize: 100 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    };
    
    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
   */
  async init() {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –ü–í–ó...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å apiClient
      if (!window.apiClient) {
        console.error('‚ùå window.apiClient –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏...');
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
        await new Promise(resolve => setTimeout(resolve, 100));
        if (!window.apiClient) {
          console.error('‚ùå window.apiClient –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return;
        }
      }
      console.log('‚úÖ window.apiClient –Ω–∞–π–¥–µ–Ω');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
      if (window.navigationModule) {
        await window.navigationModule.init();
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      if (!window.authModule || !window.authModule.isAuthenticated()) {
        window.location.href = '/login';
        return;
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      this.initElements();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
      await this.loadTableSettings();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
      await this.loadRegions();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      await this.loadData();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.setupEventListeners();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      this.updateSortIndicators();
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ MenuManager
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
      this.setupSorting();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
      this.setupResizeHandler();
      
      console.log('‚úÖ –ú–æ–¥—É–ª—å –ü–í–ó –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –ü–í–ó:', error);
      if (window.utils) {
        window.utils.showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –ü–í–ó', 'error');
      }
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
   */
  initElements() {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    this.elements = {
      table: document.getElementById('pvzTable'),
      tableHead: document.getElementById('tableHead'),
      tableBody: document.getElementById('tableBody'),
      pvzIdFilter: document.getElementById('pvzIdFilter'),
      regionSearchInput: document.getElementById('regionSearchInput'),
      regionSuggestions: document.getElementById('regionSuggestions'),
      selectedRegions: document.getElementById('selectedRegions'),
      addressFilter: document.getElementById('addressFilter'),
      companyFilter: document.getElementById('companyFilter'),
      btnClearFilters: document.getElementById('btnClearFilters'),
      btnExport: document.getElementById('btnExport'),
      btnRefresh: document.getElementById('btnRefresh'),
      btnTableSettings: document.getElementById('btnTableSettings'),
      btnFirstPage: document.getElementById('btnFirstPage'),
      btnPrevPage: document.getElementById('btnPrevPage'),
      btnNextPage: document.getElementById('btnNextPage'),
      btnLastPage: document.getElementById('btnLastPage'),
      paginationInfo: document.getElementById('paginationInfo'),
      paginationPages: document.getElementById('paginationPages'),
      tableSettingsModal: document.getElementById('tableSettingsModal'),
      closeTableSettings: document.getElementById('closeTableSettings'),
      columnSettings: document.getElementById('columnSettings'),
      btnResetSettings: document.getElementById('btnResetSettings'),
      btnSaveSettings: document.getElementById('btnSaveSettings'),
      commentsModal: document.getElementById('commentsModal'),
      closeCommentsModal: document.getElementById('closeCommentsModal'),
      commentsForm: document.getElementById('commentsForm'),
      newComment: document.getElementById('newComment'),
      cancelComment: document.getElementById('cancelComment'),
      saveComment: document.getElementById('saveComment'),
      commentsList: document.getElementById('commentsList')
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   * –£–î–ê–õ–ï–ù–û - —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ MenuManager
   */
  initUserInfo() {
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ MenuManager
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   */
  setupSorting() {
    if (!this.elements.tableHead) return;

    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    const sortableHeaders = this.elements.tableHead.querySelectorAll('.sortable');
    sortableHeaders.forEach(header => {
      // –ö–ª–æ–Ω–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      const newHeader = header.cloneNode(true);
      header.parentNode.replaceChild(newHeader, header);
    });

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const updatedHeaders = this.elements.tableHead.querySelectorAll('.sortable');
    updatedHeaders.forEach(header => {
      header.addEventListener('click', (event) => {
        event.preventDefault();
        event.stopPropagation();
        
        const column = header.dataset.column;
        console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:', column);
        console.log('üñ±Ô∏è –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º:', this.currentSort);
        
        this.handleSort(column);
      });
    });
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è', updatedHeaders.length, '–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   */
  handleSort(column) {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    if (this.isSortingInProgress) {
      console.log('‚ö†Ô∏è –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    
    this.isSortingInProgress = true;
    
    console.log('üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–µ:', column);
    console.log('üîÑ –¢–µ–∫—É—â–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:', this.currentSort);
    
    if (this.currentSort.column === column) {
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      const oldDirection = this.currentSort.direction;
      this.currentSort.direction = this.currentSort.direction === 'asc' ? 'desc' : 'asc';
      console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${oldDirection} -> ${this.currentSort.direction}`);
    } else {
      // –ù–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      this.currentSort.column = column;
      this.currentSort.direction = 'asc';
      console.log('üîÑ –ù–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ASC');
    }

    console.log('üìä –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:', this.currentSort);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ä–∞–∑—É
    this.updateSortIndicators();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    this.applyClientSideSorting();
    
    this.isSortingInProgress = false;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   */
  updateSortIndicators() {
    if (!this.elements.tableHead) return;

    const sortableHeaders = this.elements.tableHead.querySelectorAll('.sortable');
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è', sortableHeaders.length, '–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤');
    console.log('üîÑ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:', this.currentSort);
    
    sortableHeaders.forEach(header => {
      const column = header.dataset.column;
      if (column === this.currentSort.column) {
        header.dataset.sort = this.currentSort.direction;
        console.log(`‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è ${column}: ${this.currentSort.direction}`);
      } else {
        header.dataset.sort = 'none';
        console.log(`‚ûñ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è ${column}: none`);
      }
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
   */
  setupResizeHandler() {
    let resizeTimeout;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        this.updateColumnWidths();
      }, 250);
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  setupEventListeners() {
    // –§–∏–ª—å—Ç—Ä—ã —Ä–µ–≥–∏–æ–Ω–æ–≤
    if (this.elements.regionSearchInput) {
      this.elements.regionSearchInput.addEventListener('input', (e) => {
        this.handleRegionSearch(e.target.value);
      });
      
      // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
      this.elements.regionSearchInput.addEventListener('blur', () => {
        setTimeout(() => {
          this.updateRegionSuggestions([]);
        }, 150);
      });
      
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      this.elements.regionSearchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          this.updateRegionSuggestions([]);
          this.elements.regionSearchInput.blur();
        } else if (e.key === 'ArrowDown') {
          e.preventDefault();
          this.navigateSuggestions(1);
        } else if (e.key === 'ArrowUp') {
          e.preventDefault();
          this.navigateSuggestions(-1);
        } else if (e.key === 'Enter') {
          e.preventDefault();
          this.selectHighlightedSuggestion();
        }
      });
    }


    if (this.elements.pvzIdFilter) {
      this.elements.pvzIdFilter.addEventListener('input', (e) => {
        this.handleTextFilterChange('pvzId', e.target.value);
      });
    }

    if (this.elements.addressFilter) {
      this.elements.addressFilter.addEventListener('input', (e) => {
        this.handleTextFilterChange('address', e.target.value);
      });
    }

    if (this.elements.companyFilter) {
      this.elements.companyFilter.addEventListener('input', (e) => {
        this.handleTextFilterChange('company', e.target.value);
      });
    }

    // –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if (this.elements.btnClearFilters) {
      this.elements.btnClearFilters.addEventListener('click', () => {
        this.clearFilters();
      });
    }

    if (this.elements.btnExport && !this.elements.btnExport.hasAttribute('data-listener-added')) {
      this.elements.btnExport.addEventListener('click', () => {
        this.exportData();
      });
      this.elements.btnExport.setAttribute('data-listener-added', 'true');
    }


    // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (this.elements.btnRefresh) {
      this.elements.btnRefresh.addEventListener('click', () => {
        this.refreshData({ clearCache: true, forceRefresh: true });
      });
    }

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if (this.elements.btnFirstPage) {
      this.elements.btnFirstPage.addEventListener('click', () => {
        this.currentPage = 1;
        this.handlePaginationChange();
      });
    }

    if (this.elements.btnPrevPage) {
      this.elements.btnPrevPage.addEventListener('click', () => {
        if (this.currentPage > 1) {
          this.currentPage--;
          this.handlePaginationChange();
        }
      });
    }

    if (this.elements.btnNextPage) {
      this.elements.btnNextPage.addEventListener('click', () => {
        if (this.currentPage < this.totalPages) {
          this.currentPage++;
          this.handlePaginationChange();
        }
      });
    }

    if (this.elements.btnLastPage) {
      this.elements.btnLastPage.addEventListener('click', () => {
        this.currentPage = this.totalPages;
        this.handlePaginationChange();
      });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    if (this.elements.btnTableSettings) {
      this.elements.btnTableSettings.addEventListener('click', () => {
        this.showTableSettings();
      });
    }

    if (this.elements.closeTableSettings) {
      this.elements.closeTableSettings.addEventListener('click', () => {
        this.hideTableSettings();
      });
    }

    if (this.elements.btnResetSettings) {
      this.elements.btnResetSettings.addEventListener('click', () => {
        this.resetTableSettings();
      });
    }

    if (this.elements.btnSaveSettings) {
      this.elements.btnSaveSettings.addEventListener('click', () => {
        this.saveTableSettings();
      });
    }

    // –ö–ª–∏–∫ –ø–æ overlay –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    if (this.elements.tableSettingsModal) {
      this.elements.tableSettingsModal.addEventListener('click', (e) => {
        if (e.target === this.elements.tableSettingsModal) {
          this.hideTableSettings();
        }
      });
    }

    // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –º–æ–¥—É–ª–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    if (this.elements.closeCommentsModal) {
      this.elements.closeCommentsModal.addEventListener('click', () => {
        this.hideCommentsModal();
      });
    }

    if (this.elements.cancelComment) {
      this.elements.cancelComment.addEventListener('click', () => {
        this.hideCommentsModal();
      });
    }

    if (this.elements.commentsForm && !this.elements.commentsForm.hasAttribute('data-listener-added')) {
      this.elements.commentsForm.addEventListener('submit', (e) => {
        e.preventDefault();
        this.saveComment();
      });
      this.elements.commentsForm.setAttribute('data-listener-added', 'true');
    }

    // –ö–ª–∏–∫ –ø–æ overlay –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    if (this.elements.commentsModal) {
      this.elements.commentsModal.addEventListener('click', (e) => {
        if (e.target === this.elements.commentsModal) {
          this.hideCommentsModal();
        }
      });
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
   */
  generateCacheKey() {
    const key = JSON.stringify({
      page: this.currentPage,
      limit: this.pageSize,
      sort: this.currentSort,
      filters: this.currentFilters
    });
    
    console.log('üîë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞ –¥–ª—è:', {
      page: this.currentPage,
      limit: this.pageSize,
      sort: this.currentSort,
      filters: this.currentFilters
    });
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ base64 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode
    try {
      const cacheKey = btoa(unescape(encodeURIComponent(key)));
      console.log('üîë –ö–ª—é—á –∫—ç—à–∞:', cacheKey.substring(0, 20) + '...');
      return cacheKey;
    } catch (error) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ö—ç—à
      const hashKey = this.simpleHash(key);
      console.log('üîë –ö–ª—é—á –∫—ç—à–∞ (—Ö—ç—à):', hashKey);
      return hashKey;
    }
  }

  /**
   * –ü—Ä–æ—Å—Ç–∞—è —Ö—ç—à-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ –∫—ç—à–∞
   */
  simpleHash(str) {
    let hash = 0;
    if (str.length === 0) return hash.toString();
    
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    
    return Math.abs(hash).toString(36);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
   */
  isCacheValid() {
    if (!this.cache.lastUpdate) return false;
    return (Date.now() - this.cache.lastUpdate) < this.cache.cacheTimeout;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
   */
  getCachedData() {
    const cacheKey = this.generateCacheKey();
    const cachedData = this.cache.data.get(cacheKey);
    
    if (cachedData) {
      console.log('üì¶ –ù–∞–π–¥–µ–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª—é—á–∞:', cacheKey.substring(0, 20) + '...');
    }
    
    return cachedData;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à
   */
  setCachedData(data) {
    const cacheKey = this.generateCacheKey();
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
    if (this.cache.data.size >= this.cache.maxCacheSize) {
      const firstKey = this.cache.data.keys().next().value;
      this.cache.data.delete(firstKey);
      console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∫—ç—à, —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—à–µ–Ω');
    }
    
    this.cache.data.set(cacheKey, {
      data: data,
      timestamp: Date.now()
    });
    
    this.cache.lastUpdate = Date.now();
    console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à, –∫–ª—é—á:', cacheKey.substring(0, 20) + '...');
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  clearCache() {
    const cacheSize = this.cache.data.size;
    this.cache.data.clear();
    this.cache.lastUpdate = null;
    console.log(`üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω (–±—ã–ª–æ ${cacheSize} –∑–∞–ø–∏—Å–µ–π)`);
  }

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –æ–ø—Ü–∏—è–º–∏
   */
  async refreshData(options = {}) {
    const {
      clearCache: shouldClearCache = false,
      resetPage = false,
      forceRefresh = false
    } = options;

    console.log('üîÑ refreshData –≤—ã–∑–≤–∞–Ω —Å –æ–ø—Ü–∏—è–º–∏:', options);
    console.log('üîÑ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:', this.currentSort);

    if (shouldClearCache) {
      console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö');
      this.clearCache();
    }

    if (resetPage) {
      this.currentPage = 1;
    }

    await this.loadData(forceRefresh);
    console.log('‚úÖ refreshData –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ü–í–ó
   */
  async loadData(forceRefresh = false) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å apiClient
      if (!window.apiClient) {
        console.error('‚ùå window.apiClient –Ω–µ –Ω–∞–π–¥–µ–Ω');
        throw new Error('API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      if (!forceRefresh) {
        try {
          const cachedData = this.getCachedData();
          if (cachedData && this.isCacheValid()) {
            console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            this.data = cachedData.data.items;
            this.totalPages = cachedData.data.pagination.pages;
            this.totalItems = cachedData.data.pagination.total;
            this.renderTable();
            this.updatePagination();
            return;
          } else {
            console.log('üì¶ –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞');
          }
        } catch (cacheError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞:', cacheError);
          this.clearCache(); // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –∫—ç—à
        }
      } else {
        console.log('üì¶ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫—ç—à');
      }
      
      console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ü–í–ó...');
      console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', {
        page: this.currentPage,
        limit: this.pageSize,
        sort: this.currentSort,
        filters: this.currentFilters
      });
      
      const params = new URLSearchParams();
      // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

      const url = `/api/data/pvz-with-comments?${params}`;
      console.log('üåê URL –∑–∞–ø—Ä–æ—Å–∞:', url);
      
      const response = await window.apiClient.get(url);
      console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
      
      if (response && response.success) {
        console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
          items: response.data.items ? response.data.items.length : 0,
          total: response.data.total
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        this.allData = response.data.items;
        this.data = response.data.items; // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        this.totalItems = response.data.total;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å PVZID –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        const pvzIds = this.allData.map(item => item.pvz_id);
        const uniquePvzIds = [...new Set(pvzIds)];
        console.log(`üîç –ö–ª–∏–µ–Ω—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ PVZID: ${pvzIds.length} –∑–∞–ø–∏—Å–µ–π, ${uniquePvzIds.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö PVZID`);
        
        if (pvzIds.length !== uniquePvzIds.length) {
          console.warn('‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è PVZID!');
          const duplicates = pvzIds.filter((id, index) => pvzIds.indexOf(id) !== index);
          console.warn('‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç: –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è PVZID:', [...new Set(duplicates)]);
        }
        
        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
          allDataLength: this.allData.length,
          dataLength: this.data.length,
          totalItems: this.totalItems,
          currentPage: this.currentPage
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        this.filteredData = null;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        try {
          this.setCachedData(response.data);
        } catch (cacheError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à:', cacheError);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –∫—ç—à–∞
        }
        
        console.log('üñºÔ∏è –í—ã–∑—ã–≤–∞–µ–º renderTable...');
        this.renderTable();
        console.log('üìÑ –í—ã–∑—ã–≤–∞–µ–º updatePagination...');
        this.updatePagination();
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.allData.length} –∑–∞–ø–∏—Å–µ–π –ü–í–ó`);
      } else {
        const errorMessage = response?.error || response?.details || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö';
        throw new Error(errorMessage);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ü–í–ó:', error);
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: error.message,
        stack: error.stack,
        currentPage: this.currentPage,
        currentSort: this.currentSort,
        currentFilters: this.currentFilters
      });
      if (window.utils) {
        window.utils.showNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ü–í–ó: ${error.message}`, 'error');
      }
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
   */
  async loadRegions() {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤...');
      const response = await window.apiClient.get('/api/data/regions');
      if (response.success) {
        this.regions = response.data;
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.regions.length} —Ä–µ–≥–∏–æ–Ω–æ–≤:`, this.regions.slice(0, 5));
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', response);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
   */
  handleRegionSearch(query) {
    if (!query || query.length < 2) {
      this.updateRegionSuggestions([]);
      return;
    }

    const filteredRegions = this.regions.filter(region => 
      region.toLowerCase().includes(query.toLowerCase())
    );

    this.updateRegionSuggestions(filteredRegions);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ä–µ–≥–∏–æ–Ω–æ–≤
   */
  updateRegionSuggestions(regions) {
    if (!this.elements.regionSuggestions) return;

    this.elements.regionSuggestions.innerHTML = '';
    this.currentSuggestions = regions;
    this.selectedSuggestionIndex = -1;

    if (regions.length === 0) {
      this.elements.regionSuggestions.classList.remove('show');
      return;
    }

    regions.forEach((region, index) => {
      const suggestion = document.createElement('div');
      suggestion.className = 'suggestion-item';
      suggestion.textContent = region;
      suggestion.dataset.index = index;
      suggestion.addEventListener('click', () => {
        this.addRegionDirectly(region);
        this.updateRegionSuggestions([]);
        if (this.elements.regionSearchInput) {
          this.elements.regionSearchInput.value = '';
        }
      });
      this.elements.regionSuggestions.appendChild(suggestion);
    });

    this.elements.regionSuggestions.classList.add('show');
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é
   */
  addRegionDirectly(region) {
    if (!this.currentFilters.regions.includes(region)) {
      this.currentFilters.regions.push(region);
      this.renderSelectedRegions();
      this.applyClientSideFilters(); // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      if (window.utils) {
        window.utils.showNotification(`–†–µ–≥–∏–æ–Ω "${region}" –¥–æ–±–∞–≤–ª–µ–Ω`, 'success');
      }
    } else {
      if (window.utils) {
        window.utils.showNotification(`–†–µ–≥–∏–æ–Ω "${region}" —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω`, 'warning');
      }
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
   */
  addSelectedRegion() {
    const input = this.elements.regionSearchInput;
    if (!input || !input.value.trim()) return;

    const region = input.value.trim();
    this.addRegionDirectly(region);
    input.value = '';
    this.updateRegionSuggestions([]);
  }

  /**
   * –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
   */
  navigateSuggestions(direction) {
    if (this.currentSuggestions.length === 0) return;

    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    if (this.selectedSuggestionIndex >= 0) {
      const currentSuggestion = this.elements.regionSuggestions.querySelector(`[data-index="${this.selectedSuggestionIndex}"]`);
      if (currentSuggestion) {
        currentSuggestion.classList.remove('highlighted');
      }
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
    this.selectedSuggestionIndex += direction;

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    if (this.selectedSuggestionIndex < 0) {
      this.selectedSuggestionIndex = this.currentSuggestions.length - 1;
    } else if (this.selectedSuggestionIndex >= this.currentSuggestions.length) {
      this.selectedSuggestionIndex = 0;
    }

    // –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const newSuggestion = this.elements.regionSuggestions.querySelector(`[data-index="${this.selectedSuggestionIndex}"]`);
    if (newSuggestion) {
      newSuggestion.classList.add('highlighted');
      newSuggestion.scrollIntoView({ block: 'nearest' });
    }
  }

  /**
   * –í—ã–±–æ—Ä –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
   */
  selectHighlightedSuggestion() {
    if (this.selectedSuggestionIndex >= 0 && this.selectedSuggestionIndex < this.currentSuggestions.length) {
      const region = this.currentSuggestions[this.selectedSuggestionIndex];
      this.addRegionDirectly(region);
      this.updateRegionSuggestions([]);
      if (this.elements.regionSearchInput) {
        this.elements.regionSearchInput.value = '';
      }
    } else {
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –≤ –ø–æ–ª–µ
      this.addSelectedRegion();
    }
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
   */
  renderSelectedRegions() {
    if (!this.elements.selectedRegions) return;

    this.elements.selectedRegions.innerHTML = '';
    
    this.currentFilters.regions.forEach(region => {
      const regionCloud = document.createElement('span');
      regionCloud.className = 'region-cloud';
      regionCloud.innerHTML = `
        <span class="region-name" title="${region}">${this.truncateText(region, 20)}</span>
        <button class="remove-region-btn" data-region="${region}">&times;</button>
      `;
      
      const removeBtn = regionCloud.querySelector('.remove-region-btn');
      removeBtn.addEventListener('click', () => {
        this.removeRegion(region);
      });
      
      this.elements.selectedRegions.appendChild(regionCloud);
    });
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
   */
  removeRegion(region) {
    this.currentFilters.regions = this.currentFilters.regions.filter(r => r !== region);
    this.renderSelectedRegions();
    this.applyClientSideFilters(); // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  }


  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
   */
  applyClientSideSorting() {
    console.log('üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ...');
    
    if (!this.allData || this.allData.length === 0) {
      console.log('üì° –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏');
      return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    const sortedData = [...this.allData].sort((a, b) => {
      const column = this.currentSort.column;
      const direction = this.currentSort.direction;
      
      let valueA = a[column] || '';
      let valueB = b[column] || '';
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
      if (column === 'transaction_amount') {
        // –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        valueA = parseFloat(valueA) || 0;
        valueB = parseFloat(valueB) || 0;
      } else if (column.includes('date') || column.includes('Date')) {
        // –î–∞—Ç—ã
        valueA = new Date(valueA) || new Date(0);
        valueB = new Date(valueB) || new Date(0);
      } else {
        // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        valueA = String(valueA).toLowerCase();
        valueB = String(valueB).toLowerCase();
      }
      
      let result = 0;
      if (valueA < valueB) result = -1;
      else if (valueA > valueB) result = 1;
      
      return direction === 'desc' ? -result : result;
    });
    
    console.log(`‚úÖ –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${sortedData.length} –∑–∞–ø–∏—Å–µ–π –ø–æ ${this.currentSort.column} ${this.currentSort.direction}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    this.allData = sortedData;
    this.data = sortedData; // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    this.filteredData = null;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (this.currentFilters.regions.length > 0 || 
        this.currentFilters.address || 
        this.currentFilters.company) {
      this.applyClientSideFilters();
    } else {
      // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
      this.currentPage = 1;
      this.renderTable();
      this.updatePagination();
    }
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (–±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É)
   */
  applyClientSideFilters() {
    console.log('üîç –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ...');
    
    // –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
    if (!this.allData || this.allData.length === 0) {
      console.log('üì° –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º...');
      this.loadData();
      return;
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    let filteredData = [...this.allData];
    
    // –§–∏–ª—å—Ç—Ä –ø–æ PVZ ID
    if (this.currentFilters.pvzId && this.currentFilters.pvzId.trim()) {
      const pvzIdFilter = this.currentFilters.pvzId.toLowerCase().trim();
      filteredData = filteredData.filter(item => 
        item.pvz_id && item.pvz_id.toLowerCase().includes(pvzIdFilter)
      );
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    if (this.currentFilters.regions.length > 0) {
      filteredData = filteredData.filter(item => 
        this.currentFilters.regions.includes(item.region)
      );
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –∞–¥—Ä–µ—Å—É
    if (this.currentFilters.address && this.currentFilters.address.trim()) {
      const addressFilter = this.currentFilters.address.toLowerCase().trim();
      filteredData = filteredData.filter(item => 
        item.address && item.address.toLowerCase().includes(addressFilter)
      );
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏
    if (this.currentFilters.company && this.currentFilters.company.trim()) {
      const companyFilter = this.currentFilters.company.toLowerCase().trim();
      filteredData = filteredData.filter(item => 
        item.company_name && item.company_name.toLowerCase().includes(companyFilter)
      );
    }
    
    console.log(`‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${filteredData.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ ${this.allData.length}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    this.currentPage = 1;
    this.filteredData = filteredData;
    this.renderTable();
    this.updatePagination();
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
   */
  handleTextFilterChange(type, value) {
    this.currentFilters[type] = value;
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (this.filterTimeout) {
      clearTimeout(this.filterTimeout);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
    this.filterTimeout = setTimeout(() => {
      this.currentPage = 1;
      this.applyClientSideFilters();
    }, 300); // –£–º–µ–Ω—å—à–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
   */
  clearFilters() {
    this.currentFilters = {
      pvzId: '',
      regions: [],
      address: '',
      company: ''
    };
    
    if (this.elements.pvzIdFilter) {
      this.elements.pvzIdFilter.value = '';
    }
    if (this.elements.regionSearchInput) {
      this.elements.regionSearchInput.value = '';
    }
    if (this.elements.addressFilter) {
      this.elements.addressFilter.value = '';
    }
    if (this.elements.companyFilter) {
      this.elements.companyFilter.value = '';
    }
    
    this.updateRegionSuggestions([]);
    this.renderSelectedRegions();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    this.filteredData = null;
    this.currentPage = 1;
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    this.renderTable();
    this.updatePagination();
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
   */
  applyFilters() {
    this.applyClientSideFilters();
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
   */
  renderTable() {
    if (!this.elements.tableBody) return;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const dataToRender = this.filteredData || this.data;
    
    console.log('üñºÔ∏è renderTable - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', {
      filteredData: this.filteredData ? this.filteredData.length : 0,
      data: this.data.length,
      dataToRender: dataToRender.length,
      currentPage: this.currentPage,
      pageSize: this.pageSize
    });
    
    if (dataToRender.length === 0) {
      this.elements.tableBody.innerHTML = `
        <tr>
          <td colspan="15" style="text-align: center; color: var(--text-muted);">
            –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </td>
        </tr>
      `;
      return;
    }

    // –í—Å–µ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    const startIndex = (this.currentPage - 1) * this.pageSize;
    const endIndex = startIndex + this.pageSize;
    const paginatedData = dataToRender.slice(startIndex, endIndex);
    
    console.log('üñºÔ∏è renderTable - –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è:', {
      startIndex,
      endIndex,
      paginatedDataLength: paginatedData.length,
      totalDataLength: dataToRender.length
    });

    this.elements.tableBody.innerHTML = paginatedData.map(item => {
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É —Å —Ç—É–ª—Ç–∏–ø–æ–º
      const pvzId = this.formatCellWithTooltip(item.pvz_id || '');
      const region = this.formatCellWithTooltip(item.region || '');
      const address = this.formatCellWithTooltip(item.address || '');
      const serviceName = this.formatCellWithTooltip(item.service_name || '');
      const statusDate = this.formatCellWithTooltip(item.status_date || '');
      const statusName = this.formatCellWithTooltip(item.status_name || '');
      const companyName = this.formatCellWithTooltip(item.company_name || '');
      const transactionDate = this.formatCellWithTooltip(item.transaction_date || '');
      const transactionAmount = this.formatCellWithTooltip(item.transaction_amount || '');
      const phone = this.formatCellWithTooltip(item.phone || '');
      const postalCode = this.formatCellWithTooltip(item.postal_code || '');
      const fittingRoom = this.formatCellWithTooltip(item.fitting_room || '');
      const lastComment = this.formatCellWithTooltip(item.last_comment || '');
      const commentAuthor = this.formatCellWithTooltip(item.comment_author || '');
      const commentDate = this.formatCellWithTooltip(item.comment_date || '');

      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
      if (this.data.indexOf(item) === 0) {
        console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Ç—É–ª—Ç–∏–ø–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', {
          address: { display: address.display, tooltip: address.tooltip },
          lastComment: { display: lastComment.display, tooltip: lastComment.tooltip },
          companyName: { display: companyName.display, tooltip: companyName.tooltip }
        });
      }

    return `
      <tr data-pvz-id="${this.escapeHtmlForAttribute(item.pvz_id)}" class="clickable-row">
        <td ${pvzId.tooltip ? `data-tooltip="${this.escapeHtmlForAttribute(pvzId.tooltip)}"` : ''}>${this.escapeHtml(pvzId.display)}</td>
        <td ${region.tooltip ? `data-tooltip="${this.escapeHtmlForAttribute(region.tooltip)}"` : ''}>${this.escapeHtml(region.display)}</td>
        <td ${address.tooltip ? `data-tooltip="${this.escapeHtmlForAttribute(address.tooltip)}"` : ''}>${this.escapeHtml(address.display)}</td>
        <td ${serviceName.tooltip ? `data-tooltip="${this.escapeHtmlForAttribute(serviceName.tooltip)}"` : ''}>${this.escapeHtml(serviceName.display)}</td>
        <td ${statusDate.tooltip ? `data-tooltip="${this.escapeHtmlForAttribute(statusDate.tooltip)}"` : ''}>${this.escapeHtml(statusDate.display)}</td>
        <td ${statusName.tooltip ? `data-tooltip="${this.escapeHtmlForAttribute(statusName.tooltip)}"` : ''}>${this.escapeHtml(statusName.display)}</td>
        <td ${companyName.tooltip ? `data-tooltip="${this.escapeHtmlForAttribute(companyName.tooltip)}"` : ''}>${this.escapeHtml(companyName.display)}</td>
        <td ${transactionDate.tooltip ? `data-tooltip="${this.escapeHtmlForAttribute(transactionDate.tooltip)}"` : ''}>${this.escapeHtml(transactionDate.display)}</td>
        <td ${transactionAmount.tooltip ? `data-tooltip="${this.escapeHtmlForAttribute(transactionAmount.tooltip)}"` : ''}>${this.escapeHtml(transactionAmount.display)}</td>
        <td ${phone.tooltip ? `data-tooltip="${this.escapeHtmlForAttribute(phone.tooltip)}"` : ''}>${this.escapeHtml(phone.display)}</td>
        <td ${postalCode.tooltip ? `data-tooltip="${this.escapeHtmlForAttribute(postalCode.tooltip)}"` : ''}>${this.escapeHtml(postalCode.display)}</td>
        <td ${fittingRoom.tooltip ? `data-tooltip="${this.escapeHtmlForAttribute(fittingRoom.tooltip)}"` : ''}>${this.escapeHtml(fittingRoom.display)}</td>
        <td ${lastComment.tooltip ? `data-tooltip="${this.escapeHtmlForAttribute(lastComment.tooltip)}"` : ''}>${this.escapeHtml(lastComment.display)}</td>
        <td ${commentAuthor.tooltip ? `data-tooltip="${this.escapeHtmlForAttribute(commentAuthor.tooltip)}"` : ''}>${this.escapeHtml(commentAuthor.display)}</td>
        <td ${commentDate.tooltip ? `data-tooltip="${this.escapeHtmlForAttribute(commentDate.tooltip)}"` : ''}>${this.escapeHtml(commentDate.display)}</td>
      </tr>
    `;
    }).join('');

    // –ü–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(() => {
      this.updateColumnWidths();
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      if (this.elements.tableHead && this.elements.tableBody) {
        this.applyColumnVisibility();
      }
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É–ª—Ç–∏–ø–æ–≤
      this.debugTooltips();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
      this.setupRowClickHandlers();
    }, 100);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   */
  handlePaginationChange() {
    console.log('üìÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', this.currentPage);
    console.log('üìÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ filteredData:', this.filteredData ? '–µ—Å—Ç—å' : '–Ω–µ—Ç');
    console.log('üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', this.filteredData ? this.filteredData.length : 0);
    
    // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    console.log('üîÑ –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π');
    this.renderTable();
    this.updatePagination();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   */
  updatePagination() {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const dataForPagination = this.filteredData || this.allData || [];
    
    console.log('üìÑ updatePagination - —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
      filteredData: this.filteredData ? this.filteredData.length : 0,
      allData: this.allData ? this.allData.length : 0,
      dataForPagination: dataForPagination.length,
      currentPage: this.currentPage
    });
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    this.totalItems = dataForPagination.length;
    this.totalPages = Math.ceil(this.totalItems / this.pageSize);
    
    console.log('üìÑ updatePagination - –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ:', {
      totalItems: this.totalItems,
      totalPages: this.totalPages
    });
    
    if (this.elements.btnFirstPage) {
      this.elements.btnFirstPage.disabled = this.currentPage <= 1;
    }
    
    if (this.elements.btnPrevPage) {
      this.elements.btnPrevPage.disabled = this.currentPage <= 1;
    }
    
    if (this.elements.btnNextPage) {
      this.elements.btnNextPage.disabled = this.currentPage >= this.totalPages;
    }
    
    if (this.elements.btnLastPage) {
      this.elements.btnLastPage.disabled = this.currentPage >= this.totalPages;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if (this.elements.paginationInfo) {
      const startItem = (this.currentPage - 1) * this.pageSize + 1;
      const endItem = Math.min(this.currentPage * this.pageSize, this.totalItems);
      
      this.elements.paginationInfo.textContent = `–ü–æ–∫–∞–∑–∞–Ω–æ ${startItem}-${endItem} –∏–∑ ${this.totalItems}`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    this.updatePaginationPages();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
   */
  updatePaginationPages() {
    if (!this.elements.paginationPages) return;

    this.elements.paginationPages.innerHTML = '';

    if (this.totalPages <= 1) {
      const pageBtn = document.createElement('button');
      pageBtn.className = 'pagination-page active';
      pageBtn.textContent = '1';
      this.elements.paginationPages.appendChild(pageBtn);
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let startPage = Math.max(1, this.currentPage - 2);
    let endPage = Math.min(this.totalPages, this.currentPage + 2);

    // –ï—Å–ª–∏ –º—ã –≤ –Ω–∞—á–∞–ª–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø—Ä–∞–≤–∞
    if (this.currentPage <= 3) {
      endPage = Math.min(this.totalPages, 5);
    }

    // –ï—Å–ª–∏ –º—ã –≤ –∫–æ–Ω—Ü–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ª–µ–≤–∞
    if (this.currentPage >= this.totalPages - 2) {
      startPage = Math.max(1, this.totalPages - 4);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (startPage > 1) {
      const firstBtn = document.createElement('button');
      firstBtn.className = 'pagination-page';
      firstBtn.textContent = '1';
      firstBtn.addEventListener('click', () => {
        this.currentPage = 1;
        this.handlePaginationChange();
      });
      this.elements.paginationPages.appendChild(firstBtn);

      if (startPage > 2) {
        const dots = document.createElement('span');
        dots.textContent = '...';
        dots.style.padding = '0 8px';
        dots.style.color = 'var(--text-muted)';
        this.elements.paginationPages.appendChild(dots);
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    for (let i = startPage; i <= endPage; i++) {
      const pageBtn = document.createElement('button');
      pageBtn.className = `pagination-page ${i === this.currentPage ? 'active' : ''}`;
      pageBtn.textContent = i.toString();
      pageBtn.addEventListener('click', () => {
        this.currentPage = i;
        this.handlePaginationChange();
      });
      this.elements.paginationPages.appendChild(pageBtn);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (endPage < this.totalPages) {
      if (endPage < this.totalPages - 1) {
        const dots = document.createElement('span');
        dots.textContent = '...';
        dots.style.padding = '0 8px';
        dots.style.color = 'var(--text-muted)';
        this.elements.paginationPages.appendChild(dots);
      }

      const lastBtn = document.createElement('button');
      lastBtn.className = 'pagination-page';
      lastBtn.textContent = this.totalPages.toString();
      lastBtn.addEventListener('click', () => {
        this.currentPage = this.totalPages;
        this.handlePaginationChange();
      });
      this.elements.paginationPages.appendChild(lastBtn);
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–π–∫–∏
   */
  formatCellContent(text) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º null/undefined
    const textStr = String(text || '');
    if (!textStr) return '';
    
    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ 75 —Å–∏–º–≤–æ–ª–æ–≤, –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 3 —Å—Ç—Ä–æ–∫
    if (textStr.length > 75) {
      return this.truncateToLines(textStr, 75);
    }
    
    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ 25 —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (textStr.length > 25) {
      return this.addLineBreaks(textStr, 25);
    }
    
    return textStr;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏ —Å —Ç—É–ª—Ç–∏–ø–æ–º
   */
  formatCellWithTooltip(text, originalText = null) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º null/undefined
    const textStr = String(text || '');
    const displayText = this.formatCellContent(textStr);
    const tooltipText = originalText || textStr;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—É–ª—Ç–∏–ø –µ—Å–ª–∏:
    // 1. –¢–µ–∫—Å—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω
    // 2. –¢–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ 25 —Å–∏–º–≤–æ–ª–æ–≤
    // 3. –¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    if (displayText !== tooltipText || textStr.length > 25 || textStr.includes('\n')) {
      return {
        display: displayText,
        tooltip: tooltipText
      };
    }
    
    return {
      display: displayText,
      tooltip: null
    };
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
   */
  addLineBreaks(text, maxLineLength) {
    if (text.length <= maxLineLength) {
      return text;
    }
    
    // –î–ª—è –∞–¥—Ä–µ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —É–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–µ—Ä–µ–Ω–æ—Å–∞
    if (text.includes(',')) {
      return this.addLineBreaksForAddress(text, maxLineLength);
    }
    
    const words = text.split(' ');
    const lines = [];
    let currentLine = '';
    
    for (const word of words) {
      const testLine = currentLine + (currentLine ? ' ' : '') + word;
      if (testLine.length <= maxLineLength) {
        currentLine = testLine;
      } else {
        if (currentLine) {
          lines.push(currentLine);
          currentLine = word;
        } else {
          // –ï—Å–ª–∏ —Å–ª–æ–≤–æ —Å–∞–º–æ –ø–æ —Å–µ–±–µ –¥–ª–∏–Ω–Ω–µ–µ maxLineLength, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
          lines.push(word.substring(0, maxLineLength - 3) + '...');
          currentLine = '';
        }
      }
    }
    
    if (currentLine) {
      lines.push(currentLine);
    }
    
    return lines.join('\n');
  }

  /**
   * –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤
   */
  addLineBreaksForAddress(address, maxLineLength) {
    // –†–∞–∑–±–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∑–∞–ø—è—Ç—ã–º
    const parts = address.split(',').map(part => part.trim());
    const lines = [];
    let currentLine = '';
    
    for (const part of parts) {
      const testLine = currentLine + (currentLine ? ', ' : '') + part;
      
      if (testLine.length <= maxLineLength) {
        currentLine = testLine;
      } else {
        if (currentLine) {
          lines.push(currentLine);
          currentLine = part;
        } else {
          // –ï—Å–ª–∏ —á–∞—Å—Ç—å —Å–∞–º–∞ –ø–æ —Å–µ–±–µ –¥–ª–∏–Ω–Ω–µ–µ maxLineLength, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ—ë –ø–æ —Å–ª–æ–≤–∞–º
          const words = part.split(' ');
          let wordLine = '';
          
          for (const word of words) {
            const testWordLine = wordLine + (wordLine ? ' ' : '') + word;
            if (testWordLine.length <= maxLineLength) {
              wordLine = testWordLine;
            } else {
              if (wordLine) {
                lines.push(wordLine);
                wordLine = word;
              } else {
                // –ï—Å–ª–∏ —Å–ª–æ–≤–æ —Å–∞–º–æ –ø–æ —Å–µ–±–µ –¥–ª–∏–Ω–Ω–µ–µ maxLineLength, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
                lines.push(word.substring(0, maxLineLength - 3) + '...');
                wordLine = '';
              }
            }
          }
          
          if (wordLine) {
            currentLine = wordLine;
          }
        }
      }
    }
    
    if (currentLine) {
      lines.push(currentLine);
    }
    
    return lines.join('\n');
  }

  /**
   * –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫
   */
  truncateToLines(text, maxLength) {
    if (text.length <= maxLength) {
      return text;
    }
    
    // –û–±—Ä–µ–∑–∞–µ–º –¥–æ maxLength —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–æ–µ—Ç–æ—á–∏–µ
    return text.substring(0, maxLength - 3) + '...';
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
   */
  updateColumnWidths() {
    if (!this.elements.table || !this.elements.tableHead) return;

    const headers = this.elements.tableHead.querySelectorAll('th');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    headers.forEach((header, index) => {
      const column = header.dataset.column;
      if (!column) return;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å—Ç–æ–ª–±—Ü–∞
      let optimalWidth;
      if (['pvz_id', 'phone', 'postal_code'].includes(column)) {
        optimalWidth = '80px'; // –ö–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–ª—è
      } else if (['region', 'status_name', 'company_name'].includes(column)) {
        optimalWidth = '120px'; // –°—Ä–µ–¥–Ω–∏–µ –ø–æ–ª—è
      } else if (['address', 'last_comment'].includes(column)) {
        optimalWidth = '200px'; // –î–ª–∏–Ω–Ω—ã–µ –ø–æ–ª—è
      } else {
        optimalWidth = '100px'; // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–∞
      this.elements.table.style.setProperty(`--col-${index}-width`, optimalWidth);
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
   */
  getTextWidth(text) {
    if (!text) return 0;
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    context.font = '14px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
    
    const metrics = context.measureText(text);
    return Math.ceil(metrics.width) + 24; // –î–æ–±–∞–≤–ª—è–µ–º padding
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  escapeHtml(text) {
    if (!text) return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–≤—ã—á–∫–∏)
   */
  escapeHtmlForAttribute(text) {
    if (!text) return '';
    return String(text)
      .replace(/&/g, '&amp;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
  }

  /**
   * –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É–ª—Ç–∏–ø–æ–≤
   */
  debugTooltips() {
    const cells = this.elements.tableBody.querySelectorAll('td[data-tooltip]');
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —è—á–µ–µ–∫ —Å —Ç—É–ª—Ç–∏–ø–∞–º–∏: ${cells.length}`);
    
    if (cells.length > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      const root = document.documentElement;
      const bgTooltip = getComputedStyle(root).getPropertyValue('--bg-tooltip');
      const textTooltip = getComputedStyle(root).getPropertyValue('--text-tooltip');
      console.log('üîç CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', { bgTooltip: bgTooltip.trim(), textTooltip: textTooltip.trim() });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º —Å —Ç—É–ª—Ç–∏–ø–∞–º–∏
      cells.forEach((cell, index) => {
        const tooltip = cell.getAttribute('data-tooltip');
        const columnName = this.getColumnName(cell);
        
        cell.addEventListener('mouseenter', (e) => {
          console.log(`üñ±Ô∏è –ù–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —è—á–µ–π–∫—É ${index + 1} (${columnName}): "${tooltip}"`);
          this.updateTooltipPosition(e, cell);
        });
        
        cell.addEventListener('mousemove', (e) => {
          this.updateTooltipPosition(e, cell);
        });
        
        cell.addEventListener('mouseleave', () => {
          console.log(`üñ±Ô∏è –£—Ö–æ–¥ —Å —è—á–µ–π–∫–∏ ${index + 1} (${columnName})`);
        });
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  getColumnName(cell) {
    const cellIndex = Array.from(cell.parentNode.children).indexOf(cell);
    const columnNames = [
      'pvz_id', 'region', 'address', 'service_name', 'status_date', 
      'status_name', 'company_name', 'transaction_date', 'transaction_amount',
      'phone', 'postal_code', 'fitting_room', 'last_comment', 'comment_author', 'comment_date'
    ];
    return columnNames[cellIndex] || `column_${cellIndex}`;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç—É–ª—Ç–∏–ø–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫—É—Ä—Å–æ—Ä–∞ –º—ã—à–∏
   */
  updateTooltipPosition(event, cell) {
    const mouseX = event.clientX;
    const mouseY = event.clientY;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
    const windowWidth = window.innerWidth;
    const windowHeight = window.innerHeight;
    
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ç—É–ª—Ç–∏–ø–∞
    const tooltipWidth = 300;
    const tooltipHeight = 100;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç—É–ª—Ç–∏–ø–∞
    let tooltipX = mouseX + 10; // 10px —Å–ø—Ä–∞–≤–∞ –æ—Ç –∫—É—Ä—Å–æ—Ä–∞
    let tooltipY = mouseY - tooltipHeight - 10; // 10px –≤—ã—à–µ –∫—É—Ä—Å–æ—Ä–∞
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ —Ç—É–ª—Ç–∏–ø –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
    if (tooltipX + tooltipWidth > windowWidth) {
      tooltipX = mouseX - tooltipWidth - 10; // –°–ª–µ–≤–∞ –æ—Ç –∫—É—Ä—Å–æ—Ä–∞
    }
    
    if (tooltipY < 0) {
      tooltipY = mouseY + 10; // –ù–∏–∂–µ –∫—É—Ä—Å–æ—Ä–∞
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    document.documentElement.style.setProperty('--tooltip-x', `${tooltipX}px`);
    document.documentElement.style.setProperty('--tooltip-y', `${tooltipY}px`);
  }

  /**
   * –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  truncateText(text, maxLength) {
    if (!text || text.length <= maxLength) {
      return text || '';
    }
    return text.substring(0, maxLength - 3) + '...';
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã
   */
  async loadTableSettings() {
    try {
      const response = await window.apiClient.get('/api/data/table-settings/pvz');
      if (response.success) {
        this.tableSettings = response.settings;
        // –ù–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü—ã
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã:', error);
    }
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
   */
  applyColumnVisibility() {
    if (!this.tableSettings || !this.tableSettings.columnVisibility) {
      return; // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    }
    
    const headers = this.elements.tableHead.querySelectorAll('th');
    headers.forEach((header, index) => {
      const column = header.dataset.column;
      const isVisible = this.tableSettings.columnVisibility[column] !== false;
      
      // –°–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      header.style.display = isVisible ? '' : 'none';
      
      // –°–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —è—á–µ–π–∫–∏ –≤ —Ç–µ–ª–µ —Ç–∞–±–ª–∏—Ü—ã
      const rows = this.elements.tableBody.querySelectorAll('tr');
      rows.forEach(row => {
        const cell = row.children[index];
        if (cell) {
          cell.style.display = isVisible ? '' : 'none';
        }
      });
    });
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã
   */
  applyTableSettings() {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å—Ç–æ–ª–±—Ü–æ–≤
    this.applyColumnVisibility();

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
    if (this.tableSettings.columnWidths) {
      const headers = this.elements.tableHead.querySelectorAll('th');
      headers.forEach(header => {
        const column = header.dataset.column;
        const width = this.tableSettings.columnWidths[column];
        if (width) {
          header.style.width = width;
        }
      });
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
    if (this.tableSettings.columnOrder && this.tableSettings.columnOrder.length > 0) {
      this.reorderColumns(this.tableSettings.columnOrder);
    }
  }

  /**
   * –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
   */
  reorderColumns(newOrder) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
    // –≠—Ç–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ –ø—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ drag & drop
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
   */
  showTableSettings() {
    if (this.elements.tableSettingsModal) {
      this.renderColumnSettings();
      this.elements.tableSettingsModal.classList.add('show');
    }
  }

  /**
   * –°–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
   */
  hideTableSettings() {
    if (this.elements.tableSettingsModal) {
      this.elements.tableSettingsModal.classList.remove('show');
    }
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
   */
  renderColumnSettings() {
    if (!this.elements.columnSettings) return;

    const columns = [
      { key: 'pvz_id', name: '–í–Ω–µ—à–Ω–∏–π ID –ü–í–ó' },
      { key: 'region', name: '–†–µ–≥–∏–æ–Ω' },
      { key: 'address', name: '–ê–¥—Ä–µ—Å' },
      { key: 'service_name', name: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞' },
      { key: 'status_date', name: '–î–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞' },
      { key: 'status_name', name: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞' },
      { key: 'company_name', name: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏' },
      { key: 'transaction_date', name: '–î–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' },
      { key: 'transaction_amount', name: '–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Ä—É–±' },
      { key: 'phone', name: '–¢–µ–ª–µ—Ñ–æ–Ω' },
      { key: 'postal_code', name: '–ò–Ω–¥–µ–∫—Å' },
      { key: 'fitting_room', name: '–ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è' },
      { key: 'last_comment', name: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' },
      { key: 'comment_author', name: '–ö—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª' },
      { key: 'comment_date', name: '–ö–æ–≥–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª' }
    ];

    this.elements.columnSettings.innerHTML = columns.map(column => {
      const isVisible = this.tableSettings.columnVisibility[column.key] !== false;
      return `
        <div class="column-setting">
          <label>
            <input type="checkbox" ${isVisible ? 'checked' : ''} data-column="${column.key}">
            ${column.name}
          </label>
        </div>
      `;
    }).join('');

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
    const checkboxes = this.elements.columnSettings.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', (e) => {
        const column = e.target.dataset.column;
        this.tableSettings.columnVisibility[column] = e.target.checked;
      });
    });
  }

  /**
   * –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã
   */
  async resetTableSettings() {
    try {
      await window.apiClient.delete('/api/data/table-settings/pvz');
      this.tableSettings = {
        columnVisibility: {},
        columnWidths: {},
        columnOrder: []
      };
      this.applyTableSettings();
      this.hideTableSettings();
      if (window.utils) {
        window.utils.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã', 'success');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      if (window.utils) {
        window.utils.showNotification('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
      }
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã
   */
  async saveTableSettings() {
    try {
      await window.apiClient.post('/api/data/table-settings/pvz', this.tableSettings);
      this.applyTableSettings();
      this.hideTableSettings();
      if (window.utils) {
        window.utils.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      if (window.utils) {
        window.utils.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
      }
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∏–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Ç–∞–±–ª–∏—Ü—ã
   */
  setupRowClickHandlers() {
    if (!this.elements.tableBody) return;

    const rows = this.elements.tableBody.querySelectorAll('tr[data-pvz-id]');
    rows.forEach(row => {
      row.addEventListener('click', (e) => {
        e.preventDefault();
        const pvzId = row.dataset.pvzId;
        if (pvzId) {
          this.showCommentsModal(pvzId);
        }
      });
    });
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
   */
  async showCommentsModal(pvzId) {
    this.currentPvzId = pvzId;
    
    if (!this.elements.commentsModal) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const title = this.elements.commentsModal.querySelector('.comments-modal-title');
    if (title) {
      title.textContent = `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - –ü–í–ó ${pvzId}`;
    }

    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    if (this.elements.newComment) {
      this.elements.newComment.value = '';
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    await this.loadComments(pvzId);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    this.elements.commentsModal.classList.add('show');
    document.body.style.overflow = 'hidden';
  }

  /**
   * –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
   */
  hideCommentsModal() {
    if (!this.elements.commentsModal) return;

    this.elements.commentsModal.classList.remove('show');
    document.body.style.overflow = '';
    this.currentPvzId = null;
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ü–í–ó
   */
  async loadComments(pvzId) {
    try {
      const response = await window.apiClient.get(`/api/data/comments?pvz_id=${pvzId}`);
      
      if (response.success) {
        this.renderComments(response.data);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', response.message);
        this.renderComments([]);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
      this.renderComments([]);
    }
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
   */
  renderComments(comments) {
    if (!this.elements.commentsList) return;

    if (comments.length === 0) {
      this.elements.commentsList.innerHTML = `
        <div style="padding: 20px; text-align: center; color: var(--text-muted);">
          –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç
        </div>
      `;
      return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    const sortedComments = comments.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

    this.elements.commentsList.innerHTML = sortedComments.map(comment => `
      <div class="comment-item">
        <div class="comment-text">${this.escapeHtml(comment.comment)}</div>
        <div class="comment-meta">
          <span class="comment-author">${this.escapeHtml(comment.created_by)}</span>
          <span class="comment-date">${this.formatDate(comment.created_at)}</span>
        </div>
      </div>
    `).join('');
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
   */
  async saveComment() {
    if (!this.currentPvzId || !this.elements.newComment) return;

    // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    if (this.isSavingComment) {
      console.log('‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    this.isSavingComment = true;

    const commentText = this.elements.newComment.value.trim();
    if (!commentText) {
      this.isSavingComment = false;
      if (window.utils) {
        window.utils.showNotification('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', 'warning');
      }
      return;
    }

    try {
      const response = await window.apiClient.post('/api/data/comments', {
        pvz_id: this.currentPvzId,
        comment: commentText
      });

      if (response.success) {
        if (window.utils) {
          window.utils.showNotification('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'success');
        }
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        this.elements.newComment.value = '';
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        await this.loadComments(this.currentPvzId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        this.refreshData({ clearCache: true });
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', response.message);
        if (window.utils) {
          window.utils.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', 'error');
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
      if (window.utils) {
        window.utils.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', 'error');
      }
    } finally {
      this.isSavingComment = false;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  formatDate(dateString) {
    if (!dateString) return '';
    
    try {
      const date = new Date(dateString);
      return date.toLocaleString('ru-RU', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch (error) {
      return dateString;
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Ñ–∞–π–ª
   */
  async exportData() {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    if (this.isExporting) {
      console.log('‚ö†Ô∏è –≠–∫—Å–ø–æ—Ä—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    this.isExporting = true;

    try {
      console.log('üìä –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      if (this.elements.btnExport) {
        this.elements.btnExport.disabled = true;
        this.elements.btnExport.textContent = '–≠–∫—Å–ø–æ—Ä—Ç...';
      }
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const filters = {
        pvzId: this.currentFilters.pvzId,
        regions: this.currentFilters.regions,
        address: this.currentFilters.address,
        company: this.currentFilters.company
      };
      
      console.log('üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã:', filters);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π fetch –¥–ª—è —Ñ–∞–π–ª–æ–≤)
      const token = localStorage.getItem('authToken');
      const response = await fetch('/api/data/export', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ filters })
      });
      
      if (!response.ok) {
        if (response.status === 401 || response.status === 403) {
          // –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫
          localStorage.removeItem('authToken');
          localStorage.removeItem('user');
          window.location.href = '/';
          return;
        }
        
        const errorData = await response.json();
        throw new Error(errorData.error || `HTTP ${response.status}`);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
      const blob = await response.blob();
      
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
      const now = new Date();
      const dateStr = now.toISOString().split('T')[0];
      const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-');
      const filename = `PVZ_export_${dateStr}_${timeStr}.xlsx`;
      
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
      
      console.log(`‚úÖ –§–∞–π–ª ${filename} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω`);
      
      if (window.utils) {
        window.utils.showNotification('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
      
      if (window.utils) {
        window.utils.showNotification(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${error.message}`, 'error');
      }
    } finally {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —ç–∫—Å–ø–æ—Ä—Ç–∞
      this.isExporting = false;
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
      if (this.elements.btnExport) {
        this.elements.btnExport.disabled = false;
        this.elements.btnExport.textContent = '–≠–∫—Å–ø–æ—Ä—Ç';
      }
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  window.pvzModule = new PvzModule();
});
