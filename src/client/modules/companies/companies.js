// –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏
class CompaniesManager {
    constructor() {
        this.currentPage = 1;
        this.currentSearch = '';
        this.editingCompanyId = null;
        this.api = new ApiClient();
        
        this.init();
    }

    async init() {
        console.log('üè¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        if (!this.api.isAuthenticated()) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞');
            window.location.href = '/';
            return;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.initEventListeners();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await this.loadCompanies();
        
        console.log('‚úÖ –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    initEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
        document.getElementById('addCompanyBtn').addEventListener('click', () => {
            this.showAddModal();
        });

        // –ü–æ–∏—Å–∫
        document.getElementById('searchBtn').addEventListener('click', () => {
            this.searchCompanies();
        });

        document.getElementById('searchInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.searchCompanies();
            }
        });

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        document.getElementById('closeModal').addEventListener('click', () => {
            this.hideModal();
        });

        document.getElementById('cancelBtn').addEventListener('click', () => {
            this.hideModal();
        });

        // –§–æ—Ä–º–∞ –∫–æ–º–ø–∞–Ω–∏–∏
        document.getElementById('companyForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveCompany();
        });

        // –í—ã—Ö–æ–¥
        document.getElementById('logoutBtn').addEventListener('click', () => {
            this.logout();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
        document.getElementById('companyModal').addEventListener('click', (e) => {
            if (e.target.id === 'companyModal') {
                this.hideModal();
            }
        });
    }

    async loadCompanies(page = 1, search = '') {
        try {
            console.log(`üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}, –ø–æ–∏—Å–∫: "${search}")`);
            
            const params = new URLSearchParams({
                page: page,
                limit: 50
            });
            
            if (search) {
                params.append('search', search);
            }

            const response = await this.api.get(`/api/companies?${params}`);
            
            if (response.success) {
                this.renderCompanies(response.data);
                this.renderPagination(response.pagination);
                this.currentPage = page;
                this.currentSearch = search;
            } else {
                throw new Error(response.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π: ' + error.message);
        }
    }

    renderCompanies(companies) {
        const tbody = document.getElementById('companiesTableBody');
        
        if (companies.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="5" class="no-data">
                        <div class="no-data-content">
                            <span class="no-data-icon">üìã</span>
                            <p>–ö–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                        </div>
                    </td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = companies.map(company => `
            <tr>
                <td>${company.company_id}</td>
                <td>${company.company_name}</td>
                <td>${company.phone || '-'}</td>
                <td>${this.formatDate(company.created_at)}</td>
                <td class="actions">
                    <button class="btn btn-sm btn-secondary" onclick="companiesManager.editCompany(${company.id})">
                        <span class="btn-icon">‚úèÔ∏è</span>
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="btn btn-sm btn-danger" onclick="companiesManager.deleteCompany(${company.id}, '${company.company_name}')">
                        <span class="btn-icon">üóëÔ∏è</span>
                        –£–¥–∞–ª–∏—Ç—å
                    </button>
                </td>
            </tr>
        `).join('');
    }

    renderPagination(pagination) {
        const paginationEl = document.getElementById('pagination');
        
        if (pagination.pages <= 1) {
            paginationEl.innerHTML = '';
            return;
        }

        let paginationHTML = '<div class="pagination-controls">';
        
        // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if (pagination.page > 1) {
            paginationHTML += `
                <button class="btn btn-sm btn-secondary" onclick="companiesManager.loadCompanies(${pagination.page - 1}, '${this.currentSearch}')">
                    ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è
                </button>
            `;
        }
        
        // –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
        const startPage = Math.max(1, pagination.page - 2);
        const endPage = Math.min(pagination.pages, pagination.page + 2);
        
        for (let i = startPage; i <= endPage; i++) {
            const isActive = i === pagination.page ? 'active' : '';
            paginationHTML += `
                <button class="btn btn-sm ${isActive ? 'btn-primary' : 'btn-secondary'}" 
                        onclick="companiesManager.loadCompanies(${i}, '${this.currentSearch}')">
                    ${i}
                </button>
            `;
        }
        
        // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if (pagination.page < pagination.pages) {
            paginationHTML += `
                <button class="btn btn-sm btn-secondary" onclick="companiesManager.loadCompanies(${pagination.page + 1}, '${this.currentSearch}')">
                    –°–ª–µ–¥—É—é—â–∞—è ‚Üí
                </button>
            `;
        }
        
        paginationHTML += '</div>';
        paginationHTML += `<div class="pagination-info">–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pagination.page} –∏–∑ ${pagination.pages} (–≤—Å–µ–≥–æ: ${pagination.total})</div>`;
        
        paginationEl.innerHTML = paginationHTML;
    }

    showAddModal() {
        this.editingCompanyId = null;
        document.getElementById('modalTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é';
        document.getElementById('companyForm').reset();
        document.getElementById('companyModal').style.display = 'flex';
    }

    editCompany(companyId) {
        console.log(`‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ ID: ${companyId}`);
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–ø–∞–Ω–∏—é –≤ —Ç–∞–±–ª–∏—Ü–µ
        const row = document.querySelector(`button[onclick*="editCompany(${companyId})"]`).closest('tr');
        const cells = row.querySelectorAll('td');
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏
        document.getElementById('modalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é';
        document.getElementById('companyName').value = cells[1].textContent;
        document.getElementById('companyPhone').value = cells[2].textContent === '-' ? '' : cells[2].textContent;
        
        this.editingCompanyId = companyId;
        document.getElementById('companyModal').style.display = 'flex';
    }

    async saveCompany() {
        try {
            const formData = {
                company_name: document.getElementById('companyName').value.trim(),
                phone: document.getElementById('companyPhone').value.trim()
            };

            if (!formData.company_name) {
                this.showError('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
                return;
            }

            let response;
            if (this.editingCompanyId) {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
                console.log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ ID: ${this.editingCompanyId}`);
                response = await this.api.put(`/api/companies/${this.editingCompanyId}`, formData);
            } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
                console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏');
                response = await this.api.post('/api/companies', formData);
            }

            if (response.success) {
                this.hideModal();
                await this.loadCompanies(this.currentPage, this.currentSearch);
                this.showSuccess(response.message || '–ö–æ–º–ø–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            } else {
                throw new Error(response.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: ' + error.message);
        }
    }

    async deleteCompany(companyId, companyName) {
        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é "${companyName}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
            return;
        }

        try {
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ ID: ${companyId}`);
            
            const response = await this.api.delete(`/api/companies/${companyId}`);
            
            if (response.success) {
                await this.loadCompanies(this.currentPage, this.currentSearch);
                this.showSuccess(response.message || '–ö–æ–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            } else {
                throw new Error(response.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: ' + error.message);
        }
    }

    searchCompanies() {
        const search = document.getElementById('searchInput').value.trim();
        this.loadCompanies(1, search);
    }

    hideModal() {
        document.getElementById('companyModal').style.display = 'none';
        this.editingCompanyId = null;
    }

    logout() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
            this.api.logout();
            window.location.href = '/';
        }
    }

    formatDate(dateString) {
        if (!dateString) return '-';
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    showSuccess(message) {
        // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        const notification = document.createElement('div');
        notification.className = 'notification success';
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    showError(message) {
        // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const notification = document.createElement('div');
        notification.className = 'notification error';
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let companiesManager;
document.addEventListener('DOMContentLoaded', () => {
    companiesManager = new CompaniesManager();
});
