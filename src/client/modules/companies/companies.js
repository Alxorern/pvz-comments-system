// –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏
class CompaniesManager {
    constructor() {
        this.currentPage = 1;
        this.currentFilters = {};
        this.editingCompanyId = null;
        this.api = new ApiClient();
        this.allCompanies = [];
        this.filteredCompanies = [];
        this.filterTimeout = null;
    }

    async init() {
        console.log('üè¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        if (!this.api.checkAuthAndRedirect()) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞');
            return;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.initEventListeners();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await this.loadCompanies();
        
        console.log('‚úÖ –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    initEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
        const addBtn = document.getElementById('addCompanyBtn');
        if (addBtn) {
            addBtn.addEventListener('click', () => {
                this.showAddModal();
            });
        }

        // –§–∏–ª—å—Ç—Ä—ã
        const nameFilter = document.getElementById('companyNameFilter');
        if (nameFilter) {
            nameFilter.addEventListener('input', () => {
                this.applyFilters();
            });
        }

        const phoneFilter = document.getElementById('phoneFilter');
        if (phoneFilter) {
            phoneFilter.addEventListener('input', () => {
                this.applyFilters();
            });
        }

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const closeModal = document.getElementById('closeModal');
        if (closeModal) {
            closeModal.addEventListener('click', () => {
                this.hideModal();
            });
        }

        const cancelBtn = document.getElementById('cancelBtn');
        if (cancelBtn) {
            cancelBtn.addEventListener('click', () => {
                this.hideModal();
            });
        }

        // –§–æ—Ä–º–∞ –∫–æ–º–ø–∞–Ω–∏–∏
        const companyForm = document.getElementById('companyForm');
        if (companyForm) {
            companyForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.saveCompany();
            });
        }

        // –í—ã—Ö–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞)
        const logoutBtn = document.getElementById('logoutBtn');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', () => {
                this.logout();
            });
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
        const companyModal = document.getElementById('companyModal');
        if (companyModal) {
            companyModal.addEventListener('click', (e) => {
                if (e.target.id === 'companyModal') {
                    this.hideModal();
                }
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π)
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('edit-company-btn')) {
                const companyId = e.target.getAttribute('data-company-id');
                console.log('üîç –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, companyId:', companyId);
                console.log('üîç –ö–Ω–æ–ø–∫–∞:', e.target);
                console.log('üîç data-company-id –∞—Ç—Ä–∏–±—É—Ç:', e.target.getAttribute('data-company-id'));
                this.editCompany(companyId);
            } else if (e.target.classList.contains('delete-company-btn')) {
                const companyId = e.target.getAttribute('data-company-id');
                const companyName = e.target.closest('tr').querySelector('td:nth-child(2)').textContent;
                this.deleteCompany(companyId, companyName);
            }
        });
    }

    async loadCompanies(page = 1, filters = {}) {
        try {
            console.log(`üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}, —Ñ–∏–ª—å—Ç—Ä—ã:`, filters);
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            if (this.allCompanies.length === 0 || Object.keys(filters).length === 0) {
                const response = await this.api.get('/api/companies/all');
                
                if (response.success) {
                    this.allCompanies = response.data;
                    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.allCompanies.length} –∫–æ–º–ø–∞–Ω–∏–π`);
                } else {
                    throw new Error(response.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π');
                }
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            this.applyClientFilters(filters);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π: ' + error.message);
        }
    }
    
    applyClientFilters(filters) {
        console.log('üîç –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã:', filters);
        
        let filtered = [...this.allCompanies];
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if (filters.name && filters.name.trim()) {
            const nameFilter = filters.name.toLowerCase().trim();
            filtered = filtered.filter(company => 
                company.company_name && company.company_name.toLowerCase().includes(nameFilter)
            );
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        if (filters.phone && filters.phone.trim()) {
            const phoneFilter = filters.phone.toLowerCase().trim();
            filtered = filtered.filter(company => 
                company.phone && company.phone.toLowerCase().includes(phoneFilter)
            );
        }
        
        this.filteredCompanies = filtered;
        this.currentFilters = filters;
        this.currentPage = 1;
        
        console.log(`üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: ${filtered.length} –∏–∑ ${this.allCompanies.length} –∫–æ–º–ø–∞–Ω–∏–π`);
        
        this.renderCompanies(filtered);
        this.renderPagination({
            page: 1,
            pages: 1,
            total: filtered.length
        });
    }

    renderCompanies(companies) {
        const tbody = document.getElementById('companiesTableBody');
        
        if (companies.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="5" class="no-data">
                        <div class="no-data-content">
                            <span class="no-data-icon">üìã</span>
                            <p>–ö–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                        </div>
                    </td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = companies.map(company => {
            console.log('üîç –†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–∞–Ω–∏—é:', company);
            return `
            <tr>
                <td>${company.company_id}</td>
                <td>${company.company_name}</td>
                <td>${company.phone || '-'}</td>
                <td>${this.formatDate(company.created_at)}</td>
                <td class="actions">
                    <button class="btn btn-sm edit-company-btn" data-company-id="${company.id}">
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="btn btn-sm btn-danger delete-company-btn" data-company-id="${company.id}">
                        –£–¥–∞–ª–∏—Ç—å
                    </button>
                </td>
            </tr>
        `;
        }).join('');
    }

    renderPagination(pagination) {
        const paginationEl = document.getElementById('pagination');
        
        if (!paginationEl) {
            console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        if (pagination.pages <= 1) {
            paginationEl.innerHTML = '';
            return;
        }

        let paginationHTML = '<div class="pagination-controls">';
        
        // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if (pagination.page > 1) {
            paginationHTML += `
                <button class="btn btn-sm btn-secondary" onclick="companiesManager.loadCompanies(${pagination.page - 1}, '${this.currentSearch}')">
                    ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è
                </button>
            `;
        }
        
        // –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
        const startPage = Math.max(1, pagination.page - 2);
        const endPage = Math.min(pagination.pages, pagination.page + 2);
        
        for (let i = startPage; i <= endPage; i++) {
            const isActive = i === pagination.page ? 'active' : '';
            paginationHTML += `
                <button class="btn btn-sm ${isActive ? 'btn-primary' : 'btn-secondary'}" 
                        onclick="companiesManager.loadCompanies(${i}, '${this.currentSearch}')">
                    ${i}
                </button>
            `;
        }
        
        // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if (pagination.page < pagination.pages) {
            paginationHTML += `
                <button class="btn btn-sm btn-secondary" onclick="companiesManager.loadCompanies(${pagination.page + 1}, '${this.currentSearch}')">
                    –°–ª–µ–¥—É—é—â–∞—è ‚Üí
                </button>
            `;
        }
        
        paginationHTML += '</div>';
        paginationHTML += `<div class="pagination-info">–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pagination.page} –∏–∑ ${pagination.pages} (–≤—Å–µ–≥–æ: ${pagination.total})</div>`;
        
        paginationEl.innerHTML = paginationHTML;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        this.setupPaginationEventListeners();
    }
    
    setupPaginationEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('pagination-btn') || e.target.classList.contains('pagination-page')) {
                const page = parseInt(e.target.getAttribute('data-page'));
                if (page && page !== this.currentPage) {
                    this.loadCompanies(page, this.currentFilters);
                }
            }
        });
    }

    showAddModal() {
        this.editingCompanyId = null;
        document.getElementById('modalTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é';
        document.getElementById('companyForm').reset();
        document.getElementById('companyModal').classList.add('show');
    }

    editCompany(companyId) {
        console.log(`‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ ID: ${companyId}`);
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–ø–∞–Ω–∏—é –≤ —Ç–∞–±–ª–∏—Ü–µ
        const row = document.querySelector(`button[data-company-id="${companyId}"]`).closest('tr');
        const cells = row.querySelectorAll('td');
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏
        document.getElementById('modalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é';
        document.getElementById('companyName').value = cells[1].textContent;
        document.getElementById('companyPhone').value = cells[2].textContent === '-' ? '' : cells[2].textContent;
        
        this.editingCompanyId = companyId;
        document.getElementById('companyModal').classList.add('show');
    }

    async saveCompany() {
        try {
            const formData = {
                company_name: document.getElementById('companyName').value.trim(),
                phone: document.getElementById('companyPhone').value.trim()
            };

            if (!formData.company_name) {
                this.showError('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
                return;
            }

            let response;
            if (this.editingCompanyId) {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
                console.log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ ID: ${this.editingCompanyId}`);
                response = await this.api.put(`/api/companies/${this.editingCompanyId}`, formData);
            } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
                console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏');
                response = await this.api.post('/api/companies', formData);
            }

            if (response.success) {
                this.hideModal();
                await this.loadCompanies(this.currentPage, this.currentSearch);
                this.showSuccess(response.message || '–ö–æ–º–ø–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            } else {
                throw new Error(response.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: ' + error.message);
        }
    }

    async deleteCompany(companyId, companyName) {
        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é "${companyName}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
            return;
        }

        try {
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ ID: ${companyId}`);
            
            const response = await this.api.delete(`/api/companies/${companyId}`);
            console.log('üìä –û—Ç–≤–µ—Ç API —É–¥–∞–ª–µ–Ω–∏—è:', response);
            
            if (response && response.success) {
                await this.loadCompanies(this.currentPage, this.currentFilters);
                this.showSuccess(response.message || '–ö–æ–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            } else {
                const errorMsg = response?.error || response?.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏';
                console.error('‚ùå –û—à–∏–±–∫–∞ API:', errorMsg);
                throw new Error(errorMsg);
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: ' + error.message);
        }
    }

    applyFilters() {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if (this.filterTimeout) {
            clearTimeout(this.filterTimeout);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –¥–µ–±–∞—É–Ω—Å–∞
        this.filterTimeout = setTimeout(() => {
            const nameFilter = document.getElementById('companyNameFilter').value.trim();
            const phoneFilter = document.getElementById('phoneFilter').value.trim();
            
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const filters = {};
            if (nameFilter) filters.name = nameFilter;
            if (phoneFilter) filters.phone = phoneFilter;
            
            this.applyClientFilters(filters);
        }, 300); // 300ms –∑–∞–¥–µ—Ä–∂–∫–∞
    }

    hideModal() {
        document.getElementById('companyModal').classList.remove('show');
        this.editingCompanyId = null;
    }

    logout() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
            this.api.logout();
            window.location.href = '/';
        }
    }

    formatDate(dateString) {
        if (!dateString) return '-';
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    showSuccess(message) {
        // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        const notification = document.createElement('div');
        notification.className = 'notification success';
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    showError(message) {
        // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const notification = document.createElement('div');
        notification.className = 'notification error';
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä CompaniesManager –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.companiesManager = new CompaniesManager();
