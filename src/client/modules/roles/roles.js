/**
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
 */
class RolesModule {
  constructor() {
    this.cache = {
      roles: [],
      regions: [],
      statuses: []
    };
    this.editingRoleId = null;
    this.selectedRegions = [];
    this.selectedStatuses = [];
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
   */
  async init() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —Ä–æ–ª–µ–π...');
    
    try {
      console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
      await this.loadData();
      
      console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π...');
      this.setupEventListeners();
      
      console.log('üé® –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–æ–ª–∏...');
      this.renderRoles();
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ MenuManager
      
      console.log('‚úÖ –ú–æ–¥—É–ª—å —Ä–æ–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è —Ä–æ–ª–µ–π:', error);
      if (window.utils) {
        window.utils.showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è —Ä–æ–ª–µ–π', 'error');
      }
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   * –£–î–ê–õ–ï–ù–û - —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ MenuManager
   */
  initUserInfo() {
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ MenuManager
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
   */
  async loadData() {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π...');
      console.log('üîç secureApiClient –¥–æ—Å—Ç—É–ø–µ–Ω:', !!window.secureApiClient);
      console.log('üîç utils –¥–æ—Å—Ç—É–ø–µ–Ω:', !!window.utils);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏
      console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏...');
      const rolesResponse = await window.secureApiClient.get('/api/roles');
      console.log('üì• –û—Ç–≤–µ—Ç API —Ä–æ–ª–µ–π:', rolesResponse);
      
      if (rolesResponse && rolesResponse.success) {
        this.cache.roles = rolesResponse.data || [];
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–æ–ª–µ–π:', rolesResponse.data ? rolesResponse.data.length : 0);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª–µ–π:', rolesResponse);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã
      console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã...');
      const regionsResponse = await window.secureApiClient.get('/api/roles/regions');
      console.log('üì• –û—Ç–≤–µ—Ç API —Ä–µ–≥–∏–æ–Ω–æ–≤:', regionsResponse);
      
      if (regionsResponse && regionsResponse.success) {
        this.cache.regions = regionsResponse.data || [];
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤:', regionsResponse.data ? regionsResponse.data.length : 0);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤:', regionsResponse);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
      console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã...');
      const statusesResponse = await window.secureApiClient.get('/api/roles/statuses');
      console.log('üì• –û—Ç–≤–µ—Ç API —Å—Ç–∞—Ç—É—Å–æ–≤:', statusesResponse);
      
      if (statusesResponse && statusesResponse.success) {
        this.cache.statuses = statusesResponse.data || [];
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤:', statusesResponse.data ? statusesResponse.data.length : 0);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:', statusesResponse);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π:', error);
      if (window.utils) {
        window.utils.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
      }
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏
    const btnAddRole = document.getElementById('btnAddRole');
    console.log('üîç –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –Ω–∞–π–¥–µ–Ω–∞:', !!btnAddRole);
    if (btnAddRole) {
      btnAddRole.addEventListener('click', () => {
        console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏');
        this.showAddRoleModal();
      });
    }

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–æ–ª–∏
    const roleModal = document.getElementById('roleModal');
    const closeRoleModal = document.getElementById('closeRoleModal');
    const cancelRoleSave = document.getElementById('cancelRoleSave');
    const saveRoleBtn = document.getElementById('saveRoleBtn');

    console.log('üîç –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞–π–¥–µ–Ω—ã:', {
      roleModal: !!roleModal,
      closeRoleModal: !!closeRoleModal,
      cancelRoleSave: !!cancelRoleSave,
      saveRoleBtn: !!saveRoleBtn
    });

    if (closeRoleModal) {
      closeRoleModal.addEventListener('click', () => {
        console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
        this.hideRoleModal();
      });
    }
    if (cancelRoleSave) {
      cancelRoleSave.addEventListener('click', () => {
        console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–º–µ–Ω—ã');
        this.hideRoleModal();
      });
    }
    if (saveRoleBtn) {
      saveRoleBtn.addEventListener('click', () => {
        console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–ª–∏');
        this.saveRole();
      });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
    if (roleModal) {
      roleModal.addEventListener('click', (e) => {
        if (e.target === roleModal) {
          this.hideRoleModal();
        }
      });
    }

    // –ü–æ–∏—Å–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤
    const regionSearchInput = document.getElementById('regionSearchInput');
    const addRegionBtn = document.getElementById('addRegionBtn');

    if (regionSearchInput) {
      regionSearchInput.addEventListener('input', (e) => this.handleRegionSearch(e.target.value));
      
      // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
      regionSearchInput.addEventListener('blur', () => {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∫–ª–∏–∫ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é —É—Å–ø–µ–ª —Å—Ä–∞–±–æ—Ç–∞—Ç—å
        setTimeout(() => {
          this.updateRegionSuggestions([]);
        }, 150);
      });
      
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      regionSearchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          this.updateRegionSuggestions([]);
          regionSearchInput.blur();
        }
      });
    }
    if (addRegionBtn) {
      addRegionBtn.addEventListener('click', () => this.addSelectedRegion());
    }

    // –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—É—Å–æ–≤
    const statusSearchInput = document.getElementById('statusSearchInput');
    const addStatusBtn = document.getElementById('addStatusBtn');

    if (statusSearchInput) {
      // –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø–æ–ª–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
      statusSearchInput.addEventListener('focus', () => {
        this.handleStatusSearch(''); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã
      });
      
      statusSearchInput.addEventListener('input', (e) => {
        const query = e.target.value;
        this.handleStatusSearch(query);
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–¥–Ω–∏–º –∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤,
        // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–µ–ª—è–µ–º –µ–≥–æ
        if (this.cache.statuses && this.cache.statuses.includes(query)) {
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ, –Ω–æ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å
        }
      });
      
      // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
      statusSearchInput.addEventListener('blur', () => {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∫–ª–∏–∫ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é —É—Å–ø–µ–ª —Å—Ä–∞–±–æ—Ç–∞—Ç—å
        setTimeout(() => {
          this.updateStatusSuggestions([]);
        }, 150);
      });
      
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      statusSearchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          this.updateStatusSuggestions([]);
          statusSearchInput.blur();
        } else if (e.key === 'Enter') {
          e.preventDefault();
          this.addSelectedStatus();
        }
      });
    }
    if (addStatusBtn) {
      addStatusBtn.addEventListener('click', () => this.addSelectedStatus());
    }

    // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –º–æ–¥—É–ª–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
    const themeToggle = document.getElementById('themeToggle');
    if (themeToggle) {
      themeToggle.addEventListener('click', () => {
        if (window.themeModule) {
          window.themeModule.toggleTheme();
        }
      });
    }
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏
   */
  showAddRoleModal() {
    console.log('üìù –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏');
    
    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
    if (!this.cache.statuses || this.cache.statuses.length === 0) {
      console.log('‚ö†Ô∏è –°—Ç–∞—Ç—É—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º...');
      this.loadData();
    }
    
    this.editingRoleId = null;
    this.selectedRegions = [];
    this.selectedStatuses = [];
    this.clearRoleForm();
    this.updateRegionSuggestions([]);
    this.updateStatusSuggestions([]);
    this.updateSelectedRegionsDisplay();
    this.updateSelectedStatusesDisplay();
    
    const modal = document.getElementById('roleModal');
    const title = document.getElementById('roleModalTitle');
    console.log('üîç –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', { modal: !!modal, title: !!title });
    
    if (title) title.textContent = '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å';
    if (modal) {
      modal.classList.add('show');
      console.log('‚úÖ –ö–ª–∞—Å—Å show –¥–æ–±–∞–≤–ª–µ–Ω –∫ –º–æ–¥–∞–ª—å–Ω–æ–º—É –æ–∫–Ω—É');
    } else {
      console.error('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏
   */
  showEditRoleModal(roleId) {
    console.log('üìù –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏:', roleId);
    const role = this.cache.roles.find(r => r.id === roleId);
    if (!role) {
      console.error('‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', roleId);
      return;
    }

    console.log('‚úÖ –†–æ–ª—å –Ω–∞–π–¥–µ–Ω–∞:', role);
    this.editingRoleId = roleId;
    this.selectedRegions = role.regions || [];
    this.selectedStatuses = role.statuses || [];
    this.fillRoleForm(role);
    this.updateRegionSuggestions([]);
    this.updateStatusSuggestions([]);
    this.updateSelectedRegionsDisplay();
    this.updateSelectedStatusesDisplay();
    
    const modal = document.getElementById('roleModal');
    const title = document.getElementById('roleModalTitle');
    console.log('üîç –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', { modal: !!modal, title: !!title });
    
    if (title) title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª—å';
    if (modal) {
      modal.classList.add('show');
      console.log('‚úÖ –ö–ª–∞—Å—Å show –¥–æ–±–∞–≤–ª–µ–Ω –∫ –º–æ–¥–∞–ª—å–Ω–æ–º—É –æ–∫–Ω—É');
    } else {
      console.error('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
  }

  /**
   * –°–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–æ–ª–∏
   */
  hideRoleModal() {
    const modal = document.getElementById('roleModal');
    if (modal) modal.classList.remove('show');
    this.clearRoleForm();
    this.selectedRegions = [];
    this.editingRoleId = null;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Ä–æ–ª–∏
   */
  clearRoleForm() {
    const roleName = document.getElementById('roleName');
    const roleIsActive = document.getElementById('roleIsActive');
    const regionSearchInput = document.getElementById('regionSearchInput');
    const statusSearchInput = document.getElementById('statusSearchInput');
    
    if (roleName) roleName.value = '';
    if (roleIsActive) roleIsActive.checked = true;
    if (regionSearchInput) regionSearchInput.value = '';
    if (statusSearchInput) statusSearchInput.value = '';
  }

  /**
   * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–æ–ª–∏
   */
  fillRoleForm(role) {
    const roleName = document.getElementById('roleName');
    const roleIsActive = document.getElementById('roleIsActive');
    
    if (roleName) roleName.value = role.name || '';
    if (roleIsActive) roleIsActive.checked = role.is_active !== 0;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
   */
  handleRegionSearch(query) {
    if (!query || query.length < 2) {
      this.updateRegionSuggestions([]);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–≥–∏–æ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (!this.cache.regions || this.cache.regions.length === 0) {
      console.warn('‚ö†Ô∏è –†–µ–≥–∏–æ–Ω—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å...');
      this.loadData();
      return;
    }

    const filteredRegions = this.cache.regions.filter(region => 
      region.name.toLowerCase().includes(query.toLowerCase()) &&
      !this.selectedRegions.some(selected => selected.id === region.id)
    );

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è "${query}":`, filteredRegions.length);
    this.updateRegionSuggestions(filteredRegions);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ä–µ–≥–∏–æ–Ω–æ–≤
   */
  updateRegionSuggestions(regions) {
    const suggestionsContainer = document.getElementById('regionSuggestions');
    if (!suggestionsContainer) return;

    suggestionsContainer.innerHTML = '';

    if (regions.length === 0) {
      suggestionsContainer.classList.remove('show');
      return;
    }

    suggestionsContainer.classList.add('show');

    regions.forEach(region => {
      const suggestion = document.createElement('div');
      suggestion.className = 'suggestion-item';
      suggestion.textContent = region.name;
      suggestion.addEventListener('click', () => {
        // –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ
        this.addRegionDirectly(region);
        this.updateRegionSuggestions([]);
        const regionSearchInput = document.getElementById('regionSearchInput');
        if (regionSearchInput) regionSearchInput.value = '';
      });
      suggestionsContainer.appendChild(suggestion);
    });
  }

  /**
   * –ü—Ä—è–º–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
   */
  addRegionDirectly(region) {
    console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –Ω–∞–ø—Ä—è–º—É—é:', region.name);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–≥–∏–æ–Ω –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
    if (!this.selectedRegions.some(selected => selected.id === region.id)) {
      this.selectedRegions.push(region);
      this.updateSelectedRegionsDisplay();
      console.log('‚úÖ –†–µ–≥–∏–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω:', region.name);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (window.utils) {
        window.utils.showNotification(`–†–µ–≥–∏–æ–Ω "${region.name}" –¥–æ–±–∞–≤–ª–µ–Ω`, 'success');
      }
    } else {
      console.log('‚ö†Ô∏è –†–µ–≥–∏–æ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω:', region.name);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ä–µ–≥–∏–æ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω
      if (window.utils) {
        window.utils.showNotification(`–†–µ–≥–∏–æ–Ω "${region.name}" —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω`, 'warning');
      }
    }
  }

  /**
   * –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  selectRegion(region) {
    this.selectedRegion = region;
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
   */
  addSelectedRegion() {
    if (!this.selectedRegion) return;

    if (!this.selectedRegions.some(region => region.id === this.selectedRegion.id)) {
      this.selectedRegions.push(this.selectedRegion);
      this.updateSelectedRegionsDisplay();
    }

    this.selectedRegion = null;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
   */
  updateSelectedRegionsDisplay() {
    const container = document.getElementById('selectedRegionsContainer');
    if (!container) return;

    container.innerHTML = '';

    this.selectedRegions.forEach(region => {
      const regionCloud = document.createElement('div');
      regionCloud.className = 'region-cloud';
      regionCloud.innerHTML = `
        <span class="region-name">${region.name}</span>
        <button class="remove-region-btn" data-region-id="${region.id}">&times;</button>
      `;

      const removeBtn = regionCloud.querySelector('.remove-region-btn');
      removeBtn.addEventListener('click', () => this.removeRegion(region.id));

      container.appendChild(regionCloud);
    });
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
   */
  removeRegion(regionId) {
    this.selectedRegions = this.selectedRegions.filter(region => region.id !== regionId);
    this.updateSelectedRegionsDisplay();
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
   */
  handleStatusSearch(query) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (!this.cache.statuses || this.cache.statuses.length === 0) {
      console.warn('‚ö†Ô∏è –°—Ç–∞—Ç—É—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å...');
      this.loadData();
      return;
    }

    let filteredStatuses;
    
    if (!query || query.trim() === '') {
      // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
      filteredStatuses = this.cache.statuses.filter(status => 
        !this.selectedStatuses.includes(status)
      );
    } else {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
      filteredStatuses = this.cache.statuses.filter(status => 
        status.toLowerCase().includes(query.toLowerCase()) &&
        !this.selectedStatuses.includes(status)
      );
    }

    this.updateStatusSuggestions(filteredStatuses);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤
   */
  updateStatusSuggestions(statuses) {
    const suggestionsContainer = document.getElementById('statusSuggestions');
    if (!suggestionsContainer) return;

    suggestionsContainer.innerHTML = '';

    if (statuses.length === 0) {
      suggestionsContainer.classList.remove('show');
      return;
    }

    suggestionsContainer.classList.add('show');

    statuses.forEach(status => {
      const suggestion = document.createElement('div');
      suggestion.className = 'suggestion-item';
      suggestion.textContent = status;
      suggestion.addEventListener('click', () => {
        // –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∫–ª–∏–∫–µ
        this.addStatusDirectly(status);
        this.updateStatusSuggestions([]);
        const statusSearchInput = document.getElementById('statusSearchInput');
        if (statusSearchInput) statusSearchInput.value = '';
      });
      suggestionsContainer.appendChild(suggestion);
    });
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø—Ä—è–º—É—é
   */
  addStatusDirectly(status) {
    if (!this.selectedStatuses.includes(status)) {
      this.selectedStatuses.push(status);
      this.updateSelectedStatusesDisplay();
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –¥–æ–±–∞–≤–ª–µ–Ω:', status);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (window.utils) {
        window.utils.showNotification(`–°—Ç–∞—Ç—É—Å "${status}" –¥–æ–±–∞–≤–ª–µ–Ω`, 'success');
      }
    } else {
      console.log('‚ö†Ô∏è –°—Ç–∞—Ç—É—Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω:', status);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω
      if (window.utils) {
        window.utils.showNotification(`–°—Ç–∞—Ç—É—Å "${status}" —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω`, 'warning');
      }
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
   */
  addSelectedStatus() {
    const statusSearchInput = document.getElementById('statusSearchInput');
    if (!statusSearchInput || !statusSearchInput.value.trim()) {
      if (window.utils) {
        window.utils.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∏–∑ —Å–ø–∏—Å–∫–∞', 'error');
      }
      return;
    }

    const statusName = statusSearchInput.value.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    if (!this.cache.statuses || !this.cache.statuses.includes(statusName)) {
      if (window.utils) {
        window.utils.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞', 'error');
      }
      return;
    }
    
    this.addStatusDirectly(statusName);
    statusSearchInput.value = '';
    this.updateStatusSuggestions([]);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
   */
  updateSelectedStatusesDisplay() {
    const container = document.getElementById('selectedStatusesContainer');
    if (!container) return;

    container.innerHTML = '';

    this.selectedStatuses.forEach(status => {
      const statusCloud = document.createElement('div');
      statusCloud.className = 'region-cloud'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ CSS –∫–ª–∞—Å—Å
      statusCloud.innerHTML = `
        <span class="region-name">${status}</span>
        <button class="remove-region-btn" data-status-name="${status}">&times;</button>
      `;

      const removeBtn = statusCloud.querySelector('.remove-region-btn');
      removeBtn.addEventListener('click', () => this.removeStatus(status));

      container.appendChild(statusCloud);
    });
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
   */
  removeStatus(statusName) {
    this.selectedStatuses = this.selectedStatuses.filter(status => status !== statusName);
    this.updateSelectedStatusesDisplay();
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏
   */
  async saveRole() {
    const roleName = document.getElementById('roleName');
    const roleIsActive = document.getElementById('roleIsActive');

    if (!roleName || !roleName.value.trim()) {
      if (window.utils) {
        window.utils.showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏', 'error');
      }
      return;
    }

    const roleData = {
      name: roleName.value.trim(),
      is_active: roleIsActive ? roleIsActive.checked : true,
      regions: this.selectedRegions.map(region => region.id),
      statuses: this.selectedStatuses
    };

    try {
      let result;
      if (this.editingRoleId) {
        result = await window.secureApiClient.put(`/api/roles/${this.editingRoleId}`, roleData);
      } else {
        result = await window.secureApiClient.post('/api/roles', roleData);
      }

      if (result && result.success) {
        this.hideRoleModal();
        await this.loadData();
        this.renderRoles();
        if (window.utils) {
          window.utils.showNotification(
            this.editingRoleId ? '–†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ' : '–†–æ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 
            'success'
          );
        }
      } else {
        if (window.utils) {
          window.utils.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–ª–∏', 'error');
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–ª–∏:', error);
      if (window.utils) {
        window.utils.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–ª–∏', 'error');
      }
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏
   */
  async deleteRole(roleId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ä–æ–ª—å?')) {
      return;
    }

    try {
      const result = await window.secureApiClient.delete(`/api/roles/${roleId}`);
      if (result && result.ok) {
        await this.loadData();
        this.renderRoles();
        if (window.utils) {
          window.utils.showNotification('–†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');
        }
      } else {
        if (window.utils) {
          window.utils.showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏', 'error');
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏:', error);
      if (window.utils) {
        window.utils.showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏', 'error');
      }
    }
  }

  /**
   * –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
   */
  truncateRegionName(name, maxLength = 20) {
    if (name.length <= maxLength) {
      return name;
    }
    return name.substring(0, maxLength - 3) + '...';
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
   */
  renderRoles() {
    const tbody = document.getElementById('rolesTableBody');
    if (!tbody) return;

    tbody.innerHTML = '';

    if (this.cache.roles.length === 0) {
      tbody.innerHTML = '<tr><td colspan="6" style="text-align: center; color: var(--muted);">–†–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
      return;
    }

    this.cache.roles.forEach(role => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${role.id}</td>
        <td>${role.name}</td>
        <td>
          <span class="status-badge ${role.is_active ? 'active' : 'inactive'}">
            ${role.is_active ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
          </span>
        </td>
        <td class="regions-cell">
          <div class="regions-container">
            ${(role.regions || []).map(region => 
              `<span class="region-cloud region-cloud-table" title="${region.name}">${this.truncateRegionName(region.name)}</span>`
            ).join('')}
          </div>
        </td>
        <td class="statuses-cell">
          <div class="regions-container">
            ${(role.statuses || []).map(status => 
              `<span class="region-cloud region-cloud-table" title="${status}">${this.truncateRegionName(status)}</span>`
            ).join('')}
          </div>
        </td>
        <td>
          <button class="btn btn-sm edit-role-btn" data-role-id="${role.id}">
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
          </button>
          <button class="btn btn-sm btn-danger delete-role-btn" data-role-id="${role.id}">
            –£–¥–∞–ª–∏—Ç—å
          </button>
        </td>
      `;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
      const editBtn = row.querySelector('.edit-role-btn');
      const deleteBtn = row.querySelector('.delete-role-btn');
      
      if (editBtn) {
        editBtn.addEventListener('click', () => {
          console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏:', role.id);
          this.showEditRoleModal(role.id);
        });
      }
      
      if (deleteBtn) {
        deleteBtn.addEventListener('click', () => {
          console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏:', role.id);
          this.deleteRole(role.id);
        });
      }
      
      tbody.appendChild(row);
    });
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è
window.rolesModule = new RolesModule();
