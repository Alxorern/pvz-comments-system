const database = require('../database/db');

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function checkRole(allowedRoles = []) {
  return async (req, res, next) => {
    try {
      if (!req.user) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
        return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' });
      }

      const db = database.getDb();
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userRole = await new Promise((resolve, reject) => {
        const sql = 'SELECT r.name as role_name, r.is_active FROM users u LEFT JOIN roles r ON u.role_id = r.id WHERE u.user_id = ?';
        const params = [req.user.id];
        
        db.get(sql, params, (err, row) => {
          if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ SQL –∑–∞–ø—Ä–æ—Å–∞:', err);
            reject(err);
          } else {
            resolve(row);
          }
        });
      });

      if (!userRole) {
        return res.status(403).json({ error: '–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Ä–æ–ª—å
      const isRoleActive = userRole.is_active === 1 || userRole.is_active === '1' || userRole.is_active === true;
      if (!isRoleActive) {
        return res.status(403).json({ error: '–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–æ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
      if (allowedRoles.length > 0 && !allowedRoles.includes(userRole.role_name)) {
        return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞' });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å
      req.userRole = userRole.role_name;
      req.user.role = userRole.role_name;

      next();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏' });
    }
  };
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 */
function requireAdmin(req, res, next) {
  return checkRole(['admin'])(req, res, next);
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Ä–æ–ª—å superuser
 */
function requireSuperuser(req, res, next) {
  return checkRole(['superuser'])(req, res, next);
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Ä–æ–ª—å admin –∏–ª–∏ superuser
 */
function requireAdminOrSuperuser(req, res, next) {
  return checkRole(['admin', 'superuser'])(req, res, next);
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ª—é–±—É—é —Ä–æ–ª—å (–Ω–µ null)
 */
function requireAnyRole(req, res, next) {
  return checkRole()(req, res, next);
}

/**
 * Middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
 */
function addMenuPermissions(req, res, next) {
  if (!req.user) {
    return next();
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∫–æ–º–ø–∞–Ω–∏—é
  const db = database.getDb();
  const sql = `
    SELECT 
      r.name as role_name,
      u.company_id
    FROM users u 
    LEFT JOIN roles r ON u.role_id = r.id 
    WHERE u.user_id = ?
  `;
  
  db.get(sql, [req.user.id], (err, row) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –¥–ª—è –º–µ–Ω—é:', err);
      return next();
    }

    const roleName = row?.role_name;
    const userCompanyId = row?.company_id;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    let menuItems = [];
    
    if (roleName === 'admin') {
      // –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
      menuItems = ['pvz', 'analytics', 'companies', 'users', 'roles', 'settings'];
    } else if (roleName === 'superuser') {
      // Superuser –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –ü–í–ó
      menuItems = ['pvz'];
    } else {
      // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –ü–í–ó
      menuItems = ['pvz'];
    }
    
    req.user.menuItems = menuItems;
    req.user.roleName = roleName;
    req.user.companyId = userCompanyId;
    
    next();
  });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–≥–∏–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ —Ä–æ–ª–∏
 */
async function getUserRegions(userId) {
  try {
    const db = database.getDb();
    
    const regions = await new Promise((resolve, reject) => {
      db.all(
        `SELECT DISTINCT reg.name as region_name 
         FROM users u 
         JOIN roles r ON u.role_id = r.id 
         JOIN role_regions rr ON r.id = rr.role_id 
         JOIN regions reg ON rr.region_id = reg.id 
         WHERE u.user_id = ? AND r.is_active = 1`,
        [userId],
        (err, rows) => {
          if (err) reject(err);
          else resolve(rows);
        }
      );
    });

    return regions.map(row => row.region_name);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ —Ä–æ–ª–∏
 */
async function getUserStatuses(userId) {
  try {
    const db = database.getDb();
    
    const statuses = await new Promise((resolve, reject) => {
      db.all(
        `SELECT DISTINCT rs.status_name 
         FROM users u 
         JOIN roles r ON u.role_id = r.id 
         JOIN role_statuses rs ON r.id = rs.role_id 
         WHERE u.user_id = ? AND r.is_active = 1`,
        [userId],
        (err, rows) => {
          if (err) reject(err);
          else resolve(rows);
        }
      );
    });

    return statuses.map(row => row.status_name);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return [];
  }
}

/**
 * Middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–ø—Ä–æ—Å
 */
async function addUserRegions(req, res, next) {
  try {
    console.log('üîç addUserRegions - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', req.user?.id, '—Ä–æ–ª—å:', req.user?.roleName);
    console.log('üîç addUserRegions - –ø–æ–ª–Ω—ã–π req.user:', req.user);
    
    if (req.user && req.user.roleName && req.user.roleName !== 'admin') {
      req.userRegions = await getUserRegions(req.user.id);
      console.log('üìä –†–µ–≥–∏–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.userRegions);
    } else if (req.user && req.user.roleName === 'admin') {
      // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã
      req.userRegions = null; // null –æ–∑–Ω–∞—á–∞–µ—Ç "–≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã"
      console.log('üëë –ê–¥–º–∏–Ω - –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã');
    } else {
      console.log('‚ö†Ô∏è addUserRegions - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, req.userRegions –æ—Å—Ç–∞–µ—Ç—Å—è undefined');
    }
    next();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    next();
  }
}

/**
 * Middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–ø—Ä–æ—Å
 */
async function addUserStatuses(req, res, next) {
  try {
    console.log('üîç addUserStatuses - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', req.user?.id, '—Ä–æ–ª—å:', req.user?.roleName);
    if (req.user && req.user.roleName && req.user.roleName !== 'admin') {
      req.userStatuses = await getUserStatuses(req.user.id);
      console.log('üìä –°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.userStatuses);
    } else if (req.user && req.user.roleName === 'admin') {
      // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã
      req.userStatuses = null; // null –æ–∑–Ω–∞—á–∞–µ—Ç "–≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã"
      console.log('üëë –ê–¥–º–∏–Ω - –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã');
    }
    next();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    next();
  }
}

module.exports = {
  checkRole,
  requireAdmin,
  requireSuperuser,
  requireAdminOrSuperuser,
  requireAnyRole,
  addMenuPermissions,
  getUserRegions,
  addUserRegions,
  getUserStatuses,
  addUserStatuses
};
