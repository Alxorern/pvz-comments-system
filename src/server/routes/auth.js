const express = require('express');
const router = express.Router();
const database = require('../database/db');
const bcrypt = require('bcrypt');
const { generateToken, authenticateToken } = require('../middleware/auth');
const { requireAnyRole } = require('../middleware/roles');

/**
 * POST /api/auth - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.post('/', async (req, res) => {
  const { login, password } = req.body;
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const database = require('../database/db');
    const db = database.getDb();
    
    if (!db) {
      console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
      res.status(500).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞' });
      return;
    }
  
    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.get('SELECT * FROM users WHERE login = ?', [login], (err, row) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', err);
        res.status(500).json({ error: err.message });
        return;
      }
    if (row) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      if (bcrypt.compareSync(password, row.password_hash)) {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', login);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
        const token = generateToken(row);
        
        res.json({ 
          success: true, 
          token: token,
          user: { 
            login: row.login, 
            role: row.role, 
            full_name: row.full_name 
          } 
        });
      } else {
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', login);
        res.status(401).json({ error: 'Invalid credentials' });
      }
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', login);
      res.status(401).json({ error: 'Invalid credentials' });
    }
  });
  
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' });
  }
});

/**
 * POST /api/logout - –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
 */
router.post('/logout', (req, res) => {
  console.log('üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
  res.json({ success: true, message: 'Logged out successfully' });
});

/**
 * POST /api/auth/verify - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
 */
router.post('/verify', authenticateToken, (req, res) => {
  console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user.login);
  res.json({ 
    success: true, 
    user: { 
      login: req.user.login, 
      role: req.user.role, 
      full_name: req.user.full_name 
    } 
  });
});

/**
 * GET /api/auth/user-info - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
router.get('/user-info', authenticateToken, requireAnyRole, (req, res) => {
  try {
    const db = database.getDb();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –µ–≥–æ —Ä–æ–ª—å—é
    db.get(
      `SELECT u.id, u.login, u.full_name, r.name as role_name, r.is_active as role_active
       FROM users u 
       LEFT JOIN roles r ON u.role_id = r.id 
       WHERE u.id = ?`,
      [req.user.id],
      (err, row) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', err);
          res.status(500).json({ error: err.message });
          return;
        }
        
        if (!row) {
          res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
          return;
        }
        
        res.json({
          id: row.id,
          login: row.login,
          full_name: row.full_name,
          role: row.role_name || 'user',
          role_active: row.role_active
        });
      }
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ' });
  }
});

module.exports = router;
