const cron = require('node-cron');
const googleSheetsService = require('./googleSheetsService');
const database = require('../database/db');

let task = null;
let isRunning = false;
let currentFrequency = 60; // Default to 60 minutes

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–µ–¥—É–ª–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */
async function saveSchedulerState() {
  try {
    const db = database.getDb();
    await new Promise((resolve, reject) => {
      db.run(
        'INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)',
        ['scheduler_running', isRunning ? 'true' : 'false'],
        (err) => {
          if (err) reject(err);
          else resolve();
        }
      );
    });
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–∞:', error);
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–µ–¥—É–ª–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function loadSchedulerState() {
  try {
    const db = database.getDb();
    const result = await new Promise((resolve, reject) => {
      db.get(
        'SELECT value FROM settings WHERE key = ?',
        ['scheduler_running'],
        (err, row) => {
          if (err) reject(err);
          else resolve(row ? row.value === 'true' : false);
        }
      );
    });
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–∞:', error);
    return false;
  }
}

async function startScheduler() {
  if (isRunning) {
    console.log('‚ö†Ô∏è –®–µ–¥—É–ª–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫');
    return;
  }

  console.log('üîß –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —à–µ–¥—É–ª–µ—Ä–∞...');
  const settings = await googleSheetsService.getSettings();
  console.log('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–µ–¥—É–ª–µ—Ä–∞:', settings);
  
  currentFrequency = parseInt(settings.updateFrequency || '60'); // minutes
  console.log(`‚è∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞: ${currentFrequency} –º–∏–Ω—É—Ç`);

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
  if (task) {
    console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É...');
    task.stop();
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
  // cron syntax: minute hour day-of-month month day-of-week
  // For example, every 15 minutes: '*/15 * * * *'
  const cronExpression = `*/${currentFrequency} * * * *`;
  console.log(`üîß Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ${cronExpression}`);
  
  task = cron.schedule(cronExpression, async () => {
    console.log(`‚è∞ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (${currentFrequency} –º–∏–Ω)...`);
    try {
      await googleSheetsService.syncPvzData(false, true); // isScheduled = true
      console.log('‚úÖ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
    }
  }, {
    scheduled: true,
    timezone: "Europe/Moscow" // –ò–ª–∏ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
  });

  isRunning = true;
  await saveSchedulerState();
  console.log(`‚úÖ –®–µ–¥—É–ª–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å —á–∞—Å—Ç–æ—Ç–æ–π: ${currentFrequency} –º–∏–Ω—É—Ç.`);
}

async function stopScheduler() {
  if (task) {
    task.stop();
    task = null;
  }
  isRunning = false;
  await saveSchedulerState();
  console.log('üõë –®–µ–¥—É–ª–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
}

async function updateFrequency(newFrequency) {
  console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã —à–µ–¥—É–ª–µ—Ä–∞: ${currentFrequency} -> ${newFrequency} –º–∏–Ω—É—Ç`);
  currentFrequency = newFrequency;
  if (isRunning) {
    console.log('üîÑ –®–µ–¥—É–ª–µ—Ä –∑–∞–ø—É—â–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤–æ–π —á–∞—Å—Ç–æ—Ç–æ–π...');
    // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É
    await stopScheduler();
    await startScheduler();
  } else {
    console.log('‚ÑπÔ∏è –®–µ–¥—É–ª–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
  }
}

function getStatus() {
  return {
    isRunning: isRunning,
    frequency: currentFrequency,
    nextRun: task && task.nextDate ? task.nextDate().toDate() : null
  };
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–µ–¥—É–ª–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
 */
async function initializeScheduler() {
  console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–µ–¥—É–ª–µ—Ä–∞...');
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const wasRunning = await loadSchedulerState();
  console.log(`üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —à–µ–¥—É–ª–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: ${wasRunning ? '–∑–∞–ø—É—â–µ–Ω' : '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
  
  if (wasRunning) {
    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–µ–¥—É–ª–µ—Ä...');
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–µ–¥—É–ª–µ—Ä
    await startScheduler();
  } else {
    console.log('‚ÑπÔ∏è –®–µ–¥—É–ª–µ—Ä –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º');
  }
}

module.exports = {
  start: startScheduler,
  stop: stopScheduler,
  updateFrequency: updateFrequency,
  getStatus: getStatus,
  initialize: initializeScheduler
};
