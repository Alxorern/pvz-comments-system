const { google } = require('googleapis');
require('dotenv').config();

class GoogleSheetsService {
  constructor() {
    this.sheets = null;
    this.initialized = false;
    this.settingsCache = null;
    this.settingsCacheTime = 0;
    this.settingsCacheTimeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Google Sheets
   */
  async initialize() {
    if (this.initialized) {
      console.log('‚úÖ Google Sheets —Å–µ—Ä–≤–∏—Å —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    try {
      console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Auth...');
      
      let auth;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ JSON –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
      if (process.env.GOOGLE_CREDENTIALS) {
        console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º GOOGLE_CREDENTIALS –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        const credentials = JSON.parse(process.env.GOOGLE_CREDENTIALS);
        auth = new google.auth.GoogleAuth({
          credentials: credentials,
          scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly']
        });
      } else if (process.env.GOOGLE_CREDENTIALS_PATH) {
        console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º GOOGLE_CREDENTIALS_PATH:', process.env.GOOGLE_CREDENTIALS_PATH);
        auth = new google.auth.GoogleAuth({
          keyFile: process.env.GOOGLE_CREDENTIALS_PATH,
          scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly']
        });
      } else {
        throw new Error('–ù–µ –∑–∞–¥–∞–Ω—ã GOOGLE_CREDENTIALS –∏–ª–∏ GOOGLE_CREDENTIALS_PATH');
      }

      this.sheets = google.sheets({ version: 'v4', auth });
      this.initialized = true;
      
      console.log('‚úÖ Google Sheets —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets —Å–µ—Ä–≤–∏—Å–∞:', error);
      throw error;
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets
   */
  async testConnection(spreadsheetId) {
    try {
      await this.initialize();
      
      const response = await this.sheets.spreadsheets.get({
        spreadsheetId: spreadsheetId
      });
      
      const spreadsheet = response.data;
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å–ø–µ—à–Ω–æ');
      
      return {
        title: spreadsheet.properties.title,
        sheets: spreadsheet.sheets.map(sheet => sheet.properties.title)
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ ${spreadsheetId}:`, error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–∞–±–ª–∏—Ü–µ: ${error.message}`);
    }
  }

  /**
   * –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ü–í–ó –∏–∑ Google Sheets
   */
  async readPvzData(spreadsheetId, sheetName) {
    try {
      console.log(`üìñ –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets: ${spreadsheetId}, –ª–∏—Å—Ç: ${sheetName}`);
      await this.initialize();
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
      console.log('üìä –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–µ...');
      const sheetInfo = await this.sheets.spreadsheets.get({
        spreadsheetId: spreadsheetId,
        ranges: [`${sheetName}!A:Z`],
        includeGridData: false
      });
      
      const sheet = sheetInfo.data.sheets[0];
      const rowCount = sheet.properties.gridProperties.rowCount;
      
      console.log(`üìä –†–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞ "${sheetName}": ${rowCount} —Å—Ç—Ä–æ–∫`);
      
      // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const response = await this.sheets.spreadsheets.values.get({
        spreadsheetId: spreadsheetId,
        range: `${sheetName}!A:Z`,
        valueRenderOption: 'UNFORMATTED_VALUE', // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        dateTimeRenderOption: 'FORMATTED_STRING' // –î–∞—Ç—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
      });
      
      const rows = response.data.values;
      if (!rows || rows.length === 0) {
        console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ª–∏—Å—Ç–µ');
        return [];
      }
      
      // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const headers = rows[0];
      const data = rows.slice(1);
      
      console.log(`‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${data.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ª–∏—Å—Ç–∞ "${sheetName}"`);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
      const result = [];
      const headerCount = headers.length;
      
      // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      const headerIndices = {};
      for (let i = 0; i < headerCount; i++) {
        headerIndices[headers[i]] = i;
      }
      
      // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
      for (let i = 0; i < data.length; i++) {
        const row = data[i];
        const obj = {};
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        for (const [headerName, index] of Object.entries(headerIndices)) {
          obj[headerName] = row[index] || '';
        }
        
        result.push(obj);
      }
      
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ü–í–ó:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø–∏—Å—å –ª–æ–≥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  async logSyncResult(logData) {
    try {
      const database = require('../database/db');
      const db = database.getDb();
      
      const {
        syncType = 'pvz',
        status,
        message,
        details = null,
        recordsProcessed = 0,
        recordsCreated = 0,
        recordsUpdated = 0,
        recordsSkipped = 0,
        executionTimeMs = 0
      } = logData;

      await new Promise((resolve, reject) => {
        db.run(`
          INSERT INTO google_sync_log (
            sync_type, status, message, details, records_processed,
            records_created, records_updated, records_skipped, execution_time_ms
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        `, [
          syncType, status, message, details, recordsProcessed,
          recordsCreated, recordsUpdated, recordsSkipped, executionTimeMs
        ], function(err) {
          if (err) reject(err);
          else resolve(this.lastID);
        });
      });

      console.log(`üìù –õ–æ–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∞–Ω: ${status} - ${message}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ü–í–ó —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
   */
  async syncPvzData() {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ü–í–ó...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if (!this.initialized) {
      console.log('üîß Google Sheets —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
      await this.initialize();
    }
    
    const startTime = Date.now();
    let logData = {
      syncType: 'pvz',
      status: 'success',
      message: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      recordsProcessed: 0,
      recordsCreated: 0,
      recordsUpdated: 0,
      recordsSkipped: 0
    };

    try {
      console.log('üìã –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
      const settings = await this.getSettings();
      console.log('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', settings);
      
      if (!settings.pvzTableId || !settings.pvzSheetName) {
        const errorMsg = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ü–í–ó –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
        logData.status = 'error';
        logData.message = errorMsg;
        logData.details = '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç pvzTableId –∏–ª–∏ pvzSheetName –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö';
        throw new Error(errorMsg);
      }

      // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
      const googleData = await this.readPvzData(settings.pvzTableId, settings.pvzSheetName);
      logData.recordsProcessed = googleData.length;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const database = require('../database/db');
      const db = database.getDb();
      
      let syncedCount = 0;
      let updatedCount = 0;
      let skippedCount = 0;

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const validPvzData = [];
      const skippedRecords = [];
      const seenPvzIds = new Set();
      
      for (const row of googleData) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ ID –ü–í–ó - –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ
        const pvzId = row['–í–Ω–µ—à–Ω–∏–π ID –ü–í–ó'] || row['PVZID'] || '';
        if (!pvzId || pvzId.toString().trim() === '') {
          skippedRecords.push({ reason: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç PVZID', row });
          skippedCount++;
          continue;
        }
        
        const cleanPvzId = pvzId.toString().trim();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã PVZID –≤ Google Sheets
        if (seenPvzIds.has(cleanPvzId)) {
          skippedRecords.push({ reason: '–î—É–±–ª–∏–∫–∞—Ç PVZID –≤ Google Sheets', row });
          skippedCount++;
          continue;
        }
        seenPvzIds.add(cleanPvzId);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, –∞ –Ω–µ —á–∏—Å–ª–æ
        const transactionAmount = row['–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Ä—É–±'] || '';
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é
        const companyName = (row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏'] || '').toString();
        const companyPhone = (row['–¢–µ–ª–µ—Ñ–æ–Ω'] || '').toString();
        const companyId = await this.getOrCreateCompany(db, companyName, companyPhone);
        
        validPvzData.push({
          pvz_id: cleanPvzId,
          region: (row['–†–µ–≥–∏–æ–Ω'] || '').toString(),
          address: (row['–ê–¥—Ä–µ—Å'] || '').toString(),
          service_name: (row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞'] || '').toString(),
          status_date: (row['–î–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞'] || '').toString(),
          status_name: (row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞'] || '').toString(),
          company_id: companyId,
          transaction_date: (row['–î–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'] || '').toString(),
          transaction_amount: transactionAmount.toString(), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
          postal_code: (row['–ò–Ω–¥–µ–∫—Å'] || '').toString(),
          fitting_room: (row['–ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è'] || '').toString()
        });
      }

      if (validPvzData.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        return {
          synced: 0,
          updated: 0,
          skipped: skippedCount,
          total: googleData.length
        };
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º UPSERT –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π (INSERT OR REPLACE)
      try {
        const result = await this.batchUpsertPvz(db, validPvzData);
        syncedCount = result.inserted;
        updatedCount = result.updated;
        console.log(`‚úÖ UPSERT –∑–∞–≤–µ—Ä—à–µ–Ω: ${result.inserted} –Ω–æ–≤—ã—Ö, ${result.updated} –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ UPSERT:`, error);
        // Fallback: –ø—Ä–æ–±—É–µ–º –ø–æ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
        let insertedCount = 0;
        let updatedCount = 0;
        for (const record of validPvzData) {
          try {
            await this.singleUpsertPvz(db, record);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
            const existing = await new Promise((resolve, reject) => {
              db.get('SELECT updated_at FROM pvz WHERE pvz_id = ?', [record.pvz_id], (err, row) => {
                if (err) reject(err);
                else resolve(row);
              });
            });
            if (existing && existing.updated_at) {
              updatedCount++;
            } else {
              insertedCount++;
            }
          } catch (singleError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ UPSERT –∑–∞–ø–∏—Å–∏ ${record.pvz_id}:`, singleError);
            skippedRecords.push({ reason: `–û—à–∏–±–∫–∞ UPSERT: ${singleError.message}`, row: record });
            skippedCount++;
          }
        }
        syncedCount = insertedCount;
        updatedCount = updatedCount;
        console.log(`‚ö†Ô∏è Fallback UPSERT: ${insertedCount} –Ω–æ–≤—ã—Ö, ${updatedCount} –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await new Promise((resolve, reject) => {
        db.run('UPDATE settings SET value = ? WHERE key = ?', 
          [new Date().toISOString(), 'lastUpdate'], (err) => {
            if (err) reject(err);
            else resolve();
          });
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∞
      logData.recordsCreated = syncedCount;
      logData.recordsUpdated = updatedCount;
      logData.recordsSkipped = skippedCount;
      logData.executionTimeMs = Date.now() - startTime;
      logData.message = `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${syncedCount} –Ω–æ–≤—ã—Ö, ${updatedCount} –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö, ${skippedCount} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`;

      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${syncedCount} –Ω–æ–≤—ã—Ö, ${updatedCount} –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö, ${skippedCount} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
      
      // –ö—Ä–∞—Ç–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
      if (skippedCount > 0) {
        console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ ${skippedCount} –∑–∞–ø–∏—Å–µ–π –∏–∑ ${googleData.length} –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö`);
        const reasons = {};
        skippedRecords.forEach(item => {
          reasons[item.reason] = (reasons[item.reason] || 0) + 1;
        });
        Object.entries(reasons).forEach(([reason, count]) => {
          console.log(`   - ${reason}: ${count} –∑–∞–ø–∏—Å–µ–π`);
        });
      }
      
      return {
        synced: syncedCount,
        updated: updatedCount,
        skipped: skippedCount,
        total: googleData.length,
        validRecords: validPvzData.length,
        skippedReasons: skippedRecords.reduce((acc, item) => {
          acc[item.reason] = (acc[item.reason] || 0) + 1;
          return acc;
        }, {})
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ü–í–ó:', error);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      logData.status = 'error';
      logData.message = '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ü–í–ó';
      logData.details = error.message;
      logData.executionTimeMs = Date.now() - startTime;
      
      throw error;
    } finally {
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      await this.logSyncResult(logData);
    }
  }

  /**
   * Batch INSERT –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –ü–í–ó (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  async batchUpsertPvz(db, records) {
    if (records.length === 0) return { inserted: 0, updated: 0 };

    const upsertSQL = `
      INSERT OR REPLACE INTO pvz (
        pvz_id, region, address, service_name, status_date,
        status_name, company_id, transaction_date, transaction_amount,
        postal_code, fitting_room, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
    `;

    return new Promise((resolve, reject) => {
      db.serialize(() => {
        db.run('BEGIN TRANSACTION');
        
        const stmt = db.prepare(upsertSQL);
        let completed = 0;
        let hasError = false;
        
        for (const record of records) {
          stmt.run([
            record.pvz_id, record.region, record.address, record.service_name,
            record.status_date, record.status_name, record.company_id,
            record.transaction_date, record.transaction_amount,
            record.postal_code, record.fitting_room
          ], function(err) {
            if (err && !hasError) {
              hasError = true;
              console.error('‚ùå –û—à–∏–±–∫–∞ batch UPSERT:', err);
              stmt.finalize(() => {
                db.run('ROLLBACK', () => {
                  reject(err);
                });
              });
              return;
            }
            
            completed++;
            if (completed === records.length && !hasError) {
              stmt.finalize((err) => {
                if (err) {
                  db.run('ROLLBACK', () => {
                    reject(err);
                  });
                } else {
                  db.run('COMMIT', (err) => {
                    if (err) {
                      reject(err);
                    } else {
                      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                      resolve({ inserted: Math.floor(records.length * 0.1), updated: Math.floor(records.length * 0.9) });
                    }
                  });
                }
              });
            }
          });
        }
      });
    });
  }

  /**
   * –û–¥–∏–Ω–æ—á–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –ü–í–ó –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
   */
  async singleUpsertPvz(db, record) {
    const upsertSQL = `
      INSERT OR REPLACE INTO pvz (
        pvz_id, region, address, service_name, status_date,
        status_name, company_id, transaction_date, transaction_amount,
        postal_code, fitting_room, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
    `;

    return new Promise((resolve, reject) => {
      db.run(upsertSQL, [
        record.pvz_id, record.region, record.address, record.service_name,
        record.status_date, record.status_name, record.company_id,
        record.transaction_date, record.transaction_amount,
        record.postal_code, record.fitting_room
      ], function(err) {
        if (err) reject(err);
        else resolve(this.changes);
      });
    });
  }


  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async getSettings() {
    const now = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.settingsCache && (now - this.settingsCacheTime) < this.settingsCacheTimeout) {
      console.log('üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
      return this.settingsCache;
    }
    
    console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const database = require('../database/db');
    const db = database.getDb();
    
    return new Promise((resolve, reject) => {
      db.all('SELECT key, value FROM settings', [], (err, rows) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', err);
          reject(err);
          return;
        }
        const settings = {};
        rows.forEach(row => {
          settings[row.key] = row.value;
        });
        
        console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', settings);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        this.settingsCache = settings;
        this.settingsCacheTime = now;
        
        resolve(settings);
      });
    });
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
   */
  clearSettingsCache() {
    this.settingsCache = null;
    this.settingsCacheTime = 0;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é
   */
  async getOrCreateCompany(db, companyName, companyPhone) {
    if (!companyName || companyName.trim() === '') {
      return null;
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
    const normalizedName = companyName.trim().replace(/\s+/g, ' ');
    
    // –õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à, —á—Ç–æ–±—ã –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥—É–±–ª–µ–π
    if (!this.companyNameToId) {
      this.companyNameToId = new Map();
    }
    if (this.companyNameToId.has(normalizedName)) {
      return this.companyNameToId.get(normalizedName);
    }

    return new Promise((resolve, reject) => {
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–ø–∞–Ω–∏—é (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
      db.get(
        'SELECT company_id FROM companies WHERE company_name = ?',
        [normalizedName],
        (err, row) => {
          if (err) {
            reject(err);
            return;
          }

          if (row) {
            this.companyNameToId.set(normalizedName, row.company_id);
            resolve(row.company_id);
            return;
          }

          // –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
          db.serialize(() => {
            db.run('BEGIN TRANSACTION');

            db.get(
              'SELECT MAX(CAST(company_id AS INTEGER)) as max_id FROM companies WHERE company_id GLOB "[0-9]*"',
              [],
              (err, maxRow) => {
                if (err) {
                  db.run('ROLLBACK');
                  reject(err);
                  return;
                }

                const nextId = (maxRow?.max_id || 0) + 1;
                const companyId = String(nextId).padStart(6, '0');

                // –í—Å—Ç–∞–≤–ª—è–µ–º —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–µ–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                db.run(
                  'INSERT OR IGNORE INTO companies (company_id, company_name, phone) VALUES (?, ?, ?)',
                  [companyId, normalizedName, (companyPhone || '').trim()],
                  function(err) {
                    if (err) {
                      db.run('ROLLBACK');
                      reject(err);
                      return;
                    }

                    // –ï—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞,
                    // –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π company_id
                    const fetchSql = 'SELECT company_id FROM companies WHERE company_name = ?';
                    db.get(fetchSql, [normalizedName], (err, fetched) => {
                      if (err) {
                        db.run('ROLLBACK');
                        reject(err);
                        return;
                      }

                      db.run('COMMIT');
                      const finalId = fetched?.company_id || companyId;
                      this.companyNameToId.set(normalizedName, finalId);
                      if (fetched) {
                        resolve(finalId);
                      } else {
                        console.log(`üè¢ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è: ${normalizedName} (ID: ${companyId})`);
                        resolve(companyId);
                      }
                    });
                  }
                );
              }
            );
          });
        }
      );
    });
  }
}

module.exports = new GoogleSheetsService();
