const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
let dbPath;
if (process.env.RAILWAY_ENVIRONMENT === 'production') {
    // –í Railway –∏—Å–ø–æ–ª—å–∑—É–µ–º Volume
    dbPath = '/app/data/billing.db';
    console.log('üöÄ Railway production environment detected');
} else if (process.env.DATABASE_PATH) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    dbPath = process.env.DATABASE_PATH;
    console.log('üîß Using DATABASE_PATH environment variable');
} else {
    // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
    try {
        const dbConfig = require('./database-config');
        dbPath = dbConfig.getDatabasePath();
        console.log('üíª Local development environment');
    } catch (error) {
        dbPath = path.join(__dirname, 'billing.db');
        console.log('üíª Fallback to default path');
    }
}

console.log(`üóÑÔ∏è Database path: ${dbPath}`);

async function initDatabase() {
    return new Promise((resolve, reject) => {
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const dbDir = path.dirname(dbPath);
        console.log(`üìÅ Database directory: ${dbDir}`);
        console.log(`üìÅ Directory exists: ${fs.existsSync(dbDir)}`);
        
        if (!fs.existsSync(dbDir)) {
            console.log(`‚ùå Directory does not exist: ${dbDir}`);
            console.log(`‚ùå NOT creating directory - this might be a Volume issue!`);
            reject(new Error(`Database directory does not exist: ${dbDir}`));
            return;
        }
        
        const db = new sqlite3.Database(dbPath, (err) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err);
                reject(err);
                return;
            }
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞:', dbPath);
            resolve(db);
        });
    });
}

async function createTables(db) {
    return new Promise((resolve, reject) => {
        const sql = `
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER UNIQUE NOT NULL,
                login TEXT UNIQUE NOT NULL,
                full_name TEXT NOT NULL,
                password_hash TEXT NOT NULL,
                role TEXT NOT NULL DEFAULT 'user',
                created TEXT,
                addwho TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                role_id INTEGER DEFAULT NULL,
                company_id TEXT DEFAULT NULL,
                FOREIGN KEY (company_id) REFERENCES companies(company_id)
            );
            
            CREATE TABLE IF NOT EXISTS settings (
                key TEXT PRIMARY KEY,
                value TEXT NOT NULL,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            );
            
            CREATE TABLE IF NOT EXISTS companies (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                company_id TEXT UNIQUE NOT NULL,
                company_name TEXT NOT NULL,
                phone TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            );
            
            -- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, —á—Ç–æ–±—ã –Ω–µ –¥–æ–ø—É—Å–∫–∞—Ç—å –¥—É–±–ª–µ–π
            CREATE UNIQUE INDEX IF NOT EXISTS idx_companies_company_name ON companies(company_name);
            
            CREATE TABLE IF NOT EXISTS pvz (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                pvz_id TEXT UNIQUE NOT NULL,
                region TEXT,
                address TEXT,
                service_name TEXT,
                status_date TEXT,
                status_name TEXT,
                company_id TEXT,
                transaction_date TEXT,
                transaction_amount TEXT,
                postal_code TEXT,
                fitting_room TEXT,
                phone TEXT,
                problems TEXT DEFAULT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (company_id) REFERENCES companies(company_id)
            );
            
            CREATE TABLE IF NOT EXISTS comments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                pvz_id TEXT NOT NULL,
                comment TEXT NOT NULL,
                created_by TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            );
            
            CREATE TABLE IF NOT EXISTS roles (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                description TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                is_active INTEGER DEFAULT 1
            );
            
            CREATE TABLE IF NOT EXISTS regions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            );
            
            CREATE TABLE IF NOT EXISTS role_regions (
                role_id INTEGER,
                region_id INTEGER,
                PRIMARY KEY (role_id, region_id),
                FOREIGN KEY (role_id) REFERENCES roles (id),
                FOREIGN KEY (region_id) REFERENCES regions (id)
            );
            
            CREATE TABLE IF NOT EXISTS role_statuses (
                role_id INTEGER,
                status_name TEXT,
                PRIMARY KEY (role_id, status_name),
                FOREIGN KEY (role_id) REFERENCES roles (id)
            );
            
            CREATE TABLE IF NOT EXISTS user_table_settings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                table_name TEXT NOT NULL,
                column_visibility TEXT NOT NULL,
                column_widths TEXT NOT NULL,
                column_order TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(user_id, table_name)
            );
            
            CREATE TABLE IF NOT EXISTS google_sync_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                status TEXT NOT NULL,
                message TEXT,
                details TEXT,
                records_processed INTEGER DEFAULT 0,
                records_created INTEGER DEFAULT 0,
                records_updated INTEGER DEFAULT 0,
                records_skipped INTEGER DEFAULT 0,
                execution_time_ms INTEGER DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                sync_type TEXT DEFAULT 'pvz'
            );
            
            CREATE TABLE IF NOT EXISTS audit_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                action TEXT NOT NULL,
                resource_type TEXT,
                resource_id TEXT,
                ip_address TEXT,
                user_agent TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            );
        `;
        
        db.exec(sql, (err) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', err);
                reject(err);
                return;
            }
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');
            resolve();
        });
    });
}

async function migrateDatabase(db) {
    return new Promise((resolve, reject) => {
        console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
        db.all("PRAGMA table_info(users)", (err, columns) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã:', err);
                reject(err);
                return;
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è –ë–î, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
            if (!columns || columns.length === 0) {
                console.log('‚úÖ –ù–æ–≤–∞—è –ë–î - –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
                resolve();
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–æ–ª–±–µ—Ü role
            const hasRoleColumn = columns.some(col => col.name === 'role');
            
            if (hasRoleColumn) {
                console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü role —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
                resolve();
            } else {
                console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü role...');
                db.run('ALTER TABLE users ADD COLUMN role TEXT DEFAULT "user"', (err) => {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ role:', err);
                        reject(err);
                        return;
                    }
                    console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü role –¥–æ–±–∞–≤–ª–µ–Ω');
                    resolve();
                });
            }
        });
    });
}

async function createAdminRole(db) {
    return new Promise((resolve, reject) => {
        console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ admin...');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–æ–ª—å admin
        db.get('SELECT id, name FROM roles WHERE name = ?', ['admin'], (err, row) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ admin:', err);
                reject(err);
                return;
            }
            
            if (row) {
                console.log(`‚úÖ –†–æ–ª—å admin —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: ${row.id})`);
                resolve();
                return;
            }
            
            const sql = `
                INSERT OR REPLACE INTO roles (id, name, description, is_active) 
                VALUES (?, ?, ?, ?)
            `;
            
            console.log('üîß –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–æ–ª—å admin —Å ID=1...');
            db.run(sql, [1, 'admin', 'admin', 1], (err) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ admin:', err);
                    reject(err);
                    return;
                }
                console.log('‚úÖ –†–æ–ª—å admin —Å–æ–∑–¥–∞–Ω–∞ —Å ID=1');
                
                // –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å superuser
                const superuserSql = `
                    INSERT OR REPLACE INTO roles (id, name, description, is_active) 
                    VALUES (?, ?, ?, ?)
                `;
                
                console.log('üîß –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–æ–ª—å superuser —Å ID=2...');
                db.run(superuserSql, [2, 'superuser', 'superuser', 1], (err) => {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ superuser:', err);
                        reject(err);
                        return;
                    }
                    console.log('‚úÖ –†–æ–ª—å superuser —Å–æ–∑–¥–∞–Ω–∞ —Å ID=2');
                    resolve();
                });
            });
        });
    });
}

async function createAdminUser(db) {
    return new Promise((resolve, reject) => {
        console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin...');
        const bcrypt = require('bcrypt');
        
        // –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const adminUsername = process.env.ADMIN_USERNAME || 'admin';
        const adminPassword = process.env.ADMIN_PASSWORD || 'admin';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin
        db.get('SELECT user_id, login FROM users WHERE user_id = 1', (err, row) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è admin:', err);
                reject(err);
                return;
            }
            
            if (row) {
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: ${row.user_id}, Login: ${row.login})`);
                resolve();
                return;
            }
            
            const hashedPassword = bcrypt.hashSync(adminPassword, 10);
            console.log(`üîß –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${adminUsername} —Å role_id=1`);
            
            const sql = `
                INSERT INTO users (user_id, login, full_name, password_hash, role, created, addwho, role_id) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            `;
            
            const createdDate = new Date().toISOString();
            db.run(sql, [1, adminUsername, 'Administrator', hashedPassword, 'admin', createdDate, 'system', 1], (err) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è admin:', err);
                    reject(err);
                    return;
                }
                console.log(`‚úÖ Admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${adminUsername} —Å role_id=1`);
                resolve();
            });
        });
    });
}

async function createSuperUser(db) {
    return new Promise((resolve, reject) => {
        console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è superuser...');
        const bcrypt = require('bcrypt');
        
        // –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const superUsername = process.env.SUPERUSER_USERNAME || 'superuser';
        const superPassword = process.env.SUPERUSER_PASSWORD || 'superuser123';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å superuser
        db.get('SELECT user_id, login FROM users WHERE user_id = 2', (err, row) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è superuser:', err);
                reject(err);
                return;
            }
            
            if (row) {
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å superuser —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: ${row.user_id}, Login: ${row.login})`);
                resolve();
                return;
            }
            
            const hashedPassword = bcrypt.hashSync(superPassword, 10);
            console.log(`üîß –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${superUsername} —Å role_id=2`);
            
            const sql = `
                INSERT INTO users (user_id, login, full_name, password_hash, role, created, addwho, role_id) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            `;
            
            const createdDate = new Date().toISOString();
            db.run(sql, [2, superUsername, 'Super User', hashedPassword, 'superuser', createdDate, 'system', 2], (err) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è superuser:', err);
                    reject(err);
                    return;
                }
                console.log(`‚úÖ Superuser —Å–æ–∑–¥–∞–Ω: ${superUsername} —Å role_id=2`);
                resolve();
            });
        });
    });
}

async function main() {
    try {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        const db = await initDatabase();
        await createTables(db);
        await migrateDatabase(db);
        await createAdminRole(db);
        await createAdminUser(db);
        await createSuperUser(db);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–∑–¥–∞–ª–æ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏
        db.get('SELECT COUNT(*) as count FROM roles', (err, row) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π:', err);
            } else {
                console.log(`üìä –†–æ–ª–µ–π –≤ –ë–î: ${row.count}`);
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        db.get('SELECT user_id, login, role_id FROM users WHERE user_id = 1', (err, row) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin:', err);
            } else if (row) {
                console.log(`üë§ Admin: ID=${row.user_id}, Login=${row.login}, Role ID=${row.role_id}`);
            } else {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º superuser
        db.get('SELECT user_id, login, role_id FROM users WHERE user_id = 2', (err, row) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è superuser:', err);
            } else if (row) {
                console.log(`üë§ Superuser: ID=${row.user_id}, Login=${row.login}, Role ID=${row.role_id}`);
            } else {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å superuser –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º JOIN –¥–ª—è admin
        db.get('SELECT u.user_id, u.login, r.name as role_name FROM users u LEFT JOIN roles r ON u.role_id = r.id WHERE u.user_id = 1', (err, row) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JOIN admin:', err);
            } else if (row) {
                console.log(`üîó Admin JOIN: User=${row.login}, Role=${row.role_name}`);
            } else {
                console.log('‚ùå Admin JOIN –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç!');
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º JOIN –¥–ª—è superuser
        db.get('SELECT u.user_id, u.login, r.name as role_name FROM users u LEFT JOIN roles r ON u.role_id = r.id WHERE u.user_id = 2', (err, row) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JOIN superuser:', err);
            } else if (row) {
                console.log(`üîó Superuser JOIN: User=${row.login}, Role=${row.role_name}`);
            } else {
                console.log('‚ùå Superuser JOIN –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç!');
            }
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            db.close((err) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î:', err);
                    process.exit(1);
                }
                console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
                process.exit(0);
            });
        });
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    }
}

main();