const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = process.env.DATABASE_PATH || '/app/data/billing.db';

async function migrateExistingData() {
    return new Promise((resolve, reject) => {
        const db = new sqlite3.Database(dbPath, (err) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err);
                reject(err);
                return;
            }
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:', dbPath);
        });

        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ü–í–ó –±–µ–∑ company_id
        db.get('SELECT COUNT(*) as count FROM pvz WHERE company_id IS NULL', (err, row) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ü–í–ó:', err);
                reject(err);
                return;
            }

            const pvzWithoutCompany = row.count;
            console.log(`üìä –ü–í–ó –±–µ–∑ company_id: ${pvzWithoutCompany}`);

            if (pvzWithoutCompany > 0) {
                console.log('üîß –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è" –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ü–í–ó...');
                
                // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                db.run(`
                    INSERT OR IGNORE INTO companies (company_id, company_name, phone) 
                    VALUES ('000000', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è', '')
                `, (err) => {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏:', err);
                        reject(err);
                        return;
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º –ü–í–ó –±–µ–∑ company_id
                    db.run(`
                        UPDATE pvz 
                        SET company_id = '000000' 
                        WHERE company_id IS NULL
                    `, function(err) {
                        if (err) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ü–í–ó:', err);
                            reject(err);
                            return;
                        }
                        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ü–í–ó: ${this.changes}`);
                        
                        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ company_id
                        db.get('SELECT COUNT(*) as count FROM users WHERE company_id IS NULL', (err, row) => {
                            if (err) {
                                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
                                reject(err);
                                return;
                            }

                            const usersWithoutCompany = row.count;
                            console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ company_id: ${usersWithoutCompany}`);

                            if (usersWithoutCompany > 0) {
                                console.log('üîß –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ company_id...');
                                
                                // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º NULL (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
                                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ company_id –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –µ—Å—Ç—å (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
                            }

                            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–æ–ª—å superuser
                            db.get('SELECT id FROM roles WHERE name = ?', ['superuser'], (err, row) => {
                                if (err) {
                                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ superuser:', err);
                                    reject(err);
                                    return;
                                }

                                if (!row) {
                                    console.log('üîß –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å superuser...');
                                    db.run(`
                                        INSERT INTO roles (id, name, description, is_active) 
                                        VALUES (2, 'superuser', 'superuser', 1)
                                    `, (err) => {
                                        if (err) {
                                            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ superuser:', err);
                                            reject(err);
                                            return;
                                        }
                                        console.log('‚úÖ –†–æ–ª—å superuser —Å–æ–∑–¥–∞–Ω–∞');
                                        finishMigration();
                                    });
                                } else {
                                    console.log('‚úÖ –†–æ–ª—å superuser —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                                    finishMigration();
                                }
                            });
                        });
                    });
                });
            } else {
                console.log('‚úÖ –í—Å–µ –ü–í–ó —É–∂–µ –∏–º–µ—é—Ç company_id');
                finishMigration();
            }
        });

        function finishMigration() {
            console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            db.close((err) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î:', err);
                    reject(err);
                } else {
                    console.log('‚úÖ –ë–î –∑–∞–∫—Ä—ã—Ç–∞');
                    resolve();
                }
            });
        }
    });
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
migrateExistingData()
    .then(() => {
        console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        process.exit(0);
    })
    .catch((error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
        process.exit(1);
    });
