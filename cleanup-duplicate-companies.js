const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = process.env.DATABASE_PATH || '/app/data/billing.db';

async function cleanupDuplicateCompanies() {
    return new Promise((resolve, reject) => {
        const db = new sqlite3.Database(dbPath, (err) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err);
                reject(err);
                return;
            }
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', dbPath);
        });

        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–æ–º–ø–∞–Ω–∏–π...');

        // 1. –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–æ–º–ø–∞–Ω–∏–∏
        db.all(`
            SELECT 
                company_name,
                COUNT(*) as count,
                GROUP_CONCAT(company_id) as company_ids
            FROM companies 
            WHERE company_name IS NOT NULL AND company_name != ''
            GROUP BY company_name 
            HAVING COUNT(*) > 1
            ORDER BY company_name
        `, (err, duplicates) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', err);
                reject(err);
                return;
            }

            if (duplicates.length === 0) {
                console.log('‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–æ–º–ø–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                db.close();
                resolve();
                return;
            }

            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–æ–º–ø–∞–Ω–∏–π: ${duplicates.length}`);

            let processedCount = 0;
            const totalDuplicates = duplicates.length;

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            duplicates.forEach((duplicate, index) => {
                const companyIds = duplicate.company_ids.split(',');
                const keepId = companyIds[0]; // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π ID
                const removeIds = companyIds.slice(1); // –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ

                console.log(`üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: "${duplicate.company_name}"`);
                console.log(`   –û—Å—Ç–∞–≤–ª—è–µ–º ID: ${keepId}`);
                console.log(`   –£–¥–∞–ª—è–µ–º ID: ${removeIds.join(', ')}`);

                // –û–±–Ω–æ–≤–ª—è–µ–º –ü–í–ó, –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ —É–¥–∞–ª—è–µ–º—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
                const updatePromises = removeIds.map(removeId => {
                    return new Promise((resolveUpdate, rejectUpdate) => {
                        db.run(
                            'UPDATE pvz SET company_id = ? WHERE company_id = ?',
                            [keepId, removeId],
                            function(err) {
                                if (err) {
                                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ü–í–ó –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${removeId}:`, err);
                                    rejectUpdate(err);
                                    return;
                                }
                                console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ü–í–ó: ${this.changes} –∑–∞–ø–∏—Å–µ–π`);
                                resolveUpdate();
                            }
                        );
                    });
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ —É–¥–∞–ª—è–µ–º—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
                const updateUserPromises = removeIds.map(removeId => {
                    return new Promise((resolveUpdate, rejectUpdate) => {
                        db.run(
                            'UPDATE users SET company_id = ? WHERE company_id = ?',
                            [keepId, removeId],
                            function(err) {
                                if (err) {
                                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${removeId}:`, err);
                                    rejectUpdate(err);
                                    return;
                                }
                                console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.changes} –∑–∞–ø–∏—Å–µ–π`);
                                resolveUpdate();
                            }
                        );
                    });
                });

                // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–æ–º–ø–∞–Ω–∏–∏
                const deletePromises = removeIds.map(removeId => {
                    return new Promise((resolveDelete, rejectDelete) => {
                        db.run(
                            'DELETE FROM companies WHERE company_id = ?',
                            [removeId],
                            function(err) {
                                if (err) {
                                    console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ ${removeId}:`, err);
                                    rejectDelete(err);
                                    return;
                                }
                                console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: ${removeId}`);
                                resolveDelete();
                            }
                        );
                    });
                });

                // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                Promise.all([...updatePromises, ...updateUserPromises, ...deletePromises])
                    .then(() => {
                        processedCount++;
                        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}/${totalDuplicates}`);
                        
                        if (processedCount === totalDuplicates) {
                            console.log('üéâ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
                            db.close((err) => {
                                if (err) {
                                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î:', err);
                                    reject(err);
                                } else {
                                    console.log('‚úÖ –ë–î –∑–∞–∫—Ä—ã—Ç–∞');
                                    resolve();
                                }
                            });
                        }
                    })
                    .catch((error) => {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
                        reject(error);
                    });
            });
        });
    });
}

// –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏
cleanupDuplicateCompanies()
    .then(() => {
        console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        process.exit(0);
    })
    .catch((error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
        process.exit(1);
    });
